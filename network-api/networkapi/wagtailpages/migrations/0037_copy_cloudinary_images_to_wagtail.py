# Generated by Django 2.2.17 on 2021-02-23 23:49
import ntpath
import requests
import time

from django.db import migrations
from django.core.files.images import ImageFile
from io import BytesIO
from mimetypes import MimeTypes
from PIL import Image as PILImage

from wagtail.images.models import Image as WagtailImage
from networkapi.wagtailpages.pagemodels.products import ProductPage


def copy_cloudinary_to_wagtail_image(apps, schema_editor):

    for product in ProductPage.objects.all():
        if product.cloudinary_image:
            mime = MimeTypes()
            mime_type = mime.guess_type(product.cloudinary_image.url)  # -> ('image/jpeg', None)
            if mime_type:
                mime_type = mime_type[0].split('/')[1].upper()
            else:
                # Default to a JPEG mimetype.
                mime_type = 'JPEG'

            # Temporarily download the image
            response = requests.get(product.cloudinary_image.url, stream=True)
            if response.status_code == 200:
                # Create an image out of the Cloudinary URL and write it to a PIL Image.
                pil_image = PILImage.open(response.raw)
                f = BytesIO()
                pil_image.save(f, mime_type)
                # Get the file name in a nice way.
                new_image_name = ntpath.basename(product.cloudinary_image.url)
                # Store the image as a WagtailImage object
                wagtail_image = WagtailImage.objects.create(
                    title=new_image_name,
                    file=ImageFile(f, name=new_image_name),
                )
                # Associate product.image with wagtail_image
                product.image = wagtail_image
                # Always generate a new revision.
                revision = product.save_revision()
                if product.live:
                    # Re-publish existing "live" pages from the latest revision
                    revision.publish()


class Migration(migrations.Migration):

    dependencies = [
        ('wagtailpages', '0036_articlepage_article_file'),
    ]

    operations = [
        migrations.RunPython(copy_cloudinary_to_wagtail_image),
    ]
