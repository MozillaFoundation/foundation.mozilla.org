# Generated by Django 2.2.17 on 2021-03-03 17:28

import django
from django.db import migrations, models
import networkapi.buyersguide.utils
from networkapi.wagtailpages.pagemodels.products import ProductPageCategory, BuyersGuideProductCategory


def find_and_copy_old_product_category_to_model(apps, schema_editor):
    for product_page_category in ProductPageCategory.objects.all():
        if hasattr(product_page_category, 'category'):
            category = product_page_category.category
            # Find the "new" model instance of the old category. Make sure
            # there is only one returned, not a full QuerySet
            new_category = BuyersGuideProductCategory.objects.filter(name=category.name).first()
            # Assign the new temporary "category_new" field. This will be
            # renamed later
            product_page_category.category_new = new_category
            product_page_category.save()


class Migration(migrations.Migration):

    dependencies = [
        ('wagtailpages', '0043_buyersguideproductcategory'),
    ]

    operations = [
        # Find the "old" product category's "clone" (the new model) and add it to `category_new`
        migrations.RunPython(find_and_copy_old_product_category_to_model),
        # Remove BuyersGuideProductCategory.category
        migrations.RemoveField(
            model_name='productpagecategory',
            name='category',
        ),
        # Rename BuyersGuideProductCategory.category_new = BuyersGuideProductCategory.category
        migrations.RenameField(
            model_name='productpagecategory',
            old_name='category_new',
            new_name='category',
        ),
    ]
