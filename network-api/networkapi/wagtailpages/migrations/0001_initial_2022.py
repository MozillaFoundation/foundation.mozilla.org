# Generated by Django 3.1.11 on 2022-02-15 22:57

import datetime
import uuid

import django.core.validators
import django.db.models.deletion
import django.db.models.expressions
import django.utils.timezone
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.blocks
import wagtail.blocks.static_block
import wagtail.contrib.routable_page.models
import wagtail.contrib.table_block.blocks
import wagtail.embeds.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail.search.index
import wagtailmedia.blocks
import wagtailmetadata.models
from django.db import migrations, models

import networkapi.wagtailpages.fields
import networkapi.wagtailpages.pagemodels.customblocks.articles
import networkapi.wagtailpages.pagemodels.mixin.foundation_banner_inheritance
import networkapi.wagtailpages.pagemodels.mixin.snippets


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("highlights", "0008_auto_20211209_0002"),
        ("wagtaildocs", "0012_uploadeddocument"),
        ("taggit", "0003_taggeditem_add_unique_index"),
        ("wagtailcore", "0066_collection_management_permissions"),
        ("wagtailimages", "0023_add_choose_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="BlogPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            (
                                "paragraph",
                                wagtail.blocks.RichTextBlock(
                                    features=[
                                        "bold",
                                        "italic",
                                        "link",
                                        "h2",
                                        "h3",
                                        "h4",
                                        "h5",
                                        "ol",
                                        "ul",
                                        "hr",
                                    ],
                                    template="wagtailpages/blocks/rich_text_block.html",
                                ),
                            ),
                            (
                                "card_grid",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "cards",
                                            wagtail.blocks.ListBlock(
                                                wagtail.blocks.StructBlock(
                                                    [
                                                        (
                                                            "image",
                                                            wagtail.images.blocks.ImageChooserBlock(),
                                                        ),
                                                        (
                                                            "alt_text",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Alt text for card's image.",
                                                                required=False,
                                                            ),
                                                        ),
                                                        (
                                                            "title",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Heading for the card."
                                                            ),
                                                        ),
                                                        (
                                                            "body",
                                                            wagtail.blocks.TextBlock(
                                                                help_text="Body text of the card."
                                                            ),
                                                        ),
                                                        (
                                                            "link_url",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Optional URL that this card should link out to. (Note: If left blank, link will not render.) ",
                                                                required=False,
                                                            ),
                                                        ),
                                                        (
                                                            "link_label",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Optional Label for the URL link above. (Note: If left blank, link will not render.) ",
                                                                required=False,
                                                            ),
                                                        ),
                                                    ]
                                                ),
                                                help_text="Please use a minimum of 2 cards.",
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "iframe",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "url",
                                            wagtail.blocks.CharBlock(
                                                help_text="Please note that only URLs from allow-listed domains will work."
                                            ),
                                        ),
                                        (
                                            "height",
                                            wagtail.blocks.IntegerBlock(
                                                help_text="Optional integer pixel value for custom iFrame height",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "captionURL",
                                            wagtail.blocks.CharBlock(
                                                help_text="Optional URL that this caption should link out to.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "iframe_width",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("normal", "Normal"),
                                                    ("wide", "Wide"),
                                                    ("full_width", "Full Width"),
                                                ],
                                                help_text="Wide iframes are col-12, Full-Width iframes reach both ends of the screen",
                                            ),
                                        ),
                                        (
                                            "disable_scroll",
                                            wagtail.blocks.BooleanBlock(
                                                default=False,
                                                help_text='Checking this will add "scrolling=no" to the iframe. Use this if your iframe is rendering an unnecessary scroll bar or whitespace below it.',
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "image",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "altText",
                                            wagtail.blocks.CharBlock(
                                                help_text="Image description (for screen readers).",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "captionURL",
                                            wagtail.blocks.CharBlock(
                                                help_text="Optional URL that this caption should link out to.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "image_width",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("normal", "Normal"),
                                                    ("wide", "Wide"),
                                                    ("full_width", "Full Width"),
                                                ],
                                                help_text="Wide images are col-12, Full-Width Images reach both ends of the screen (16:6 images recommended for full width)",
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "audio",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "audio",
                                            wagtailmedia.blocks.AudioChooserBlock(),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "image_text",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "altText",
                                            wagtail.blocks.CharBlock(
                                                help_text="Image description (for screen readers).",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "text",
                                            wagtail.blocks.RichTextBlock(
                                                features=[
                                                    "bold",
                                                    "italic",
                                                    "link",
                                                    "h2",
                                                    "h3",
                                                    "h4",
                                                    "h5",
                                                    "ol",
                                                    "ul",
                                                    "hr",
                                                ]
                                            ),
                                        ),
                                        (
                                            "url",
                                            wagtail.blocks.CharBlock(
                                                help_text="Optional URL that this image should link out to.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "top_divider",
                                            wagtail.blocks.BooleanBlock(
                                                help_text="Optional divider above content block.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "bottom_divider",
                                            wagtail.blocks.BooleanBlock(
                                                help_text="Optional divider below content block.",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "image_text_mini",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "altText",
                                            wagtail.blocks.CharBlock(
                                                help_text="Image description (for screen readers).",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "text",
                                            wagtail.blocks.RichTextBlock(features=["bold", "italic", "link"]),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "video",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "url",
                                            wagtail.blocks.CharBlock(
                                                help_text="For YouTube: go to your YouTube video and click “Share,” then “Embed,” and then copy and paste the provided URL only. For example: https://www.youtube.com/embed/3FIVXBawyQw For Vimeo: follow similar steps to grab the embed URL. For example: https://player.vimeo.com/video/9004979"
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "captionURL",
                                            wagtail.blocks.CharBlock(
                                                help_text="Optional URL for caption to link to.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "video_width",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("normal", "Normal"),
                                                    ("wide", "Wide"),
                                                    ("full_width", "Full Width"),
                                                ],
                                                help_text="Wide videos are col-12, Full-Width videos reach both ends of the screen.",
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "linkbutton",
                                wagtail.blocks.StructBlock(
                                    [
                                        ("label", wagtail.blocks.CharBlock()),
                                        ("URL", wagtail.blocks.CharBlock()),
                                        (
                                            "styling",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("btn-primary", "Primary button"),
                                                    (
                                                        "btn-secondary",
                                                        "Secondary button",
                                                    ),
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "looping_video",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "video_url",
                                            wagtail.blocks.CharBlock(
                                                help_text='Log into Vimeo using 1Password and upload the desired video. Then select the video and click "Advanced", "Distribution", and "Video File Links". Copy and paste the link here.'
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "pulse_listing",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "search_terms",
                                            wagtail.blocks.CharBlock(
                                                help_text="Test your search at mozillapulse.org/search",
                                                label="Search",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "max_number_of_results",
                                            wagtail.blocks.IntegerBlock(
                                                default=6,
                                                help_text="Choose 1-12. If you want visitors to see more, link to a search or tag on Pulse.",
                                                max_value=12,
                                                min_value=0,
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "only_featured_entries",
                                            wagtail.blocks.BooleanBlock(
                                                default=False,
                                                help_text="Featured items are selected by Pulse moderators.",
                                                label="Display only featured entries",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "newest_first",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    (
                                                        "True",
                                                        "Show newer entries first",
                                                    ),
                                                    (
                                                        "False",
                                                        "Show older entries first",
                                                    ),
                                                ],
                                                label="Sort",
                                            ),
                                        ),
                                        (
                                            "advanced_filter_header",
                                            wagtail.blocks.static_block.StaticBlock(
                                                admin_text="-------- ADVANCED FILTERS: OPTIONS TO DISPLAY FEWER, MORE TARGETED RESULTS. --------",
                                                label=" ",
                                            ),
                                        ),
                                        (
                                            "issues",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("all", "All"),
                                                    (
                                                        "Decentralization",
                                                        "Decentralization",
                                                    ),
                                                    (
                                                        "Digital Inclusion",
                                                        "Digital Inclusion",
                                                    ),
                                                    (
                                                        "Online Privacy & Security",
                                                        "Online Privacy & Security",
                                                    ),
                                                    (
                                                        "Open Innovation",
                                                        "Open Innovation",
                                                    ),
                                                    ("Web Literacy", "Web Literacy"),
                                                ]
                                            ),
                                        ),
                                        (
                                            "help",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("all", "All"),
                                                    ("Attend", "Attend"),
                                                    (
                                                        "Create content",
                                                        "Create content",
                                                    ),
                                                    ("Code", "Code"),
                                                    ("Design", "Design"),
                                                    ("Fundraise", "Fundraise"),
                                                    (
                                                        "Join community",
                                                        "Join community",
                                                    ),
                                                    (
                                                        "Localize & translate",
                                                        "Localize & translate",
                                                    ),
                                                    ("Mentor", "Mentor"),
                                                    (
                                                        "Plan & organize",
                                                        "Plan & organize",
                                                    ),
                                                    ("Promote", "Promote"),
                                                    ("Take action", "Take action"),
                                                    (
                                                        "Test & feedback",
                                                        "Test & feedback",
                                                    ),
                                                    (
                                                        "Write documentation",
                                                        "Write documentation",
                                                    ),
                                                ],
                                                label="Type of help needed",
                                            ),
                                        ),
                                        (
                                            "direct_link",
                                            wagtail.blocks.BooleanBlock(
                                                default=False,
                                                help_text="Checked: user goes to project link. Unchecked: user goes to pulse entry",
                                                label="Direct link",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "single_quote",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "quote",
                                            wagtail.blocks.RichTextBlock(features=["bold"]),
                                        ),
                                        (
                                            "attribution",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "attribution_info",
                                            wagtail.blocks.RichTextBlock(
                                                features=["bold", "link", "large"],
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "spacer",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "size",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("1", "quarter spacing"),
                                                    ("2", "half spacing"),
                                                    ("3", "single spacing"),
                                                    ("4", "one and a half spacing"),
                                                    ("5", "triple spacing"),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "airtable",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "url",
                                            wagtail.blocks.URLBlock(
                                                help_text="Copied from the Airtable embed code. The word 'embed' will be in the url"
                                            ),
                                        ),
                                        (
                                            "height",
                                            wagtail.blocks.IntegerBlock(
                                                default=533,
                                                help_text="The pixel height on desktop view, usually copied from the Airtable embed code",
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "datawrapper",
                                wagtail.embeds.blocks.EmbedBlock(
                                    help_text='Enter the "visualization only" link of the Datawrapper chart. It looks something like this: https://datawrapper.dwcdn.net/KwSKp/1/',
                                    icon="image",
                                    template="wagtailpages/blocks/datawrapper_block.html",
                                ),
                            ),
                            (
                                "typeform",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "embed_id",
                                            wagtail.blocks.CharBlock(
                                                help_text="The embed id of your Typeform page (e.g. if the form is on admin.typeform.com/form/e8zScc6t, the id will be: e8zScc6t)",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "button_type",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("btn-primary", "Primary button"),
                                                    (
                                                        "btn-secondary",
                                                        "Secondary button",
                                                    ),
                                                ]
                                            ),
                                        ),
                                        (
                                            "button_text",
                                            wagtail.blocks.CharBlock(
                                                help_text="This is a text prompt for users to open the typeform content",
                                                required=True,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                        ]
                    ),
                ),
                (
                    "hero_video",
                    models.CharField(
                        blank=True,
                        help_text="URL to video for blog page hero section.",
                        max_length=500,
                    ),
                ),
                (
                    "feature_comments",
                    models.BooleanField(
                        default=False,
                        help_text="Check this box to add a comment section for this blog post.",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                wagtailmetadata.models.WagtailImageMetadataMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="BuyersGuidePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "cutoff_date",
                    models.DateField(
                        default=datetime.datetime(2020, 10, 29, 0, 0),
                        help_text="Only show products that were reviewed on, or after this date.",
                        verbose_name="Product listing cutoff date",
                    ),
                ),
                (
                    "header",
                    models.CharField(
                        blank=True,
                        help_text="The header text for the PNI homepage",
                        max_length=120,
                    ),
                ),
                (
                    "intro_text",
                    models.TextField(
                        blank=True,
                        help_text="A short blurb to show under the header",
                        max_length=500,
                    ),
                ),
                (
                    "dark_theme",
                    models.BooleanField(
                        default=False,
                        help_text="Does the intro need to be white text (for dark backgrounds)?",
                    ),
                ),
                (
                    "hero_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="pni_hero_image",
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                        verbose_name="Search image",
                    ),
                ),
            ],
            options={
                "verbose_name": "Buyers Guide Page",
            },
            bases=(
                wagtail.contrib.routable_page.models.RoutablePageMixin,
                wagtailmetadata.models.WagtailImageMetadataMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="BuyersGuideProductCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the product category. Max. 300 characters.",
                        max_length=300,
                    ),
                ),
                (
                    "featured",
                    models.BooleanField(
                        default=False,
                        help_text="Featured category will appear first on Buyer's Guide site nav",
                    ),
                ),
                (
                    "hidden",
                    models.BooleanField(
                        default=False,
                        help_text="Hidden categories will not appear in the Buyer's Guide site nav at all",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="A URL-friendly version of the category name. This is an auto-generated field.",
                        max_length=100,
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(
                        default=1,
                        help_text="Sort ordering number. Same-numbered items sort alphabetically",
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Leave this blank for a top-level category, or pick another category to nest this under",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailpages.buyersguideproductcategory",
                    ),
                ),
                (
                    "share_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Optional image that will apear when category page is shared.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="wagtailimages.image",
                        verbose_name="Share Image",
                    ),
                ),
            ],
            options={
                "verbose_name": "Buyers Guide Product Category",
                "verbose_name_plural": "Buyers Guide Product Categories",
                "ordering": [
                    django.db.models.expressions.OrderBy(
                        django.db.models.expressions.F("parent__sort_order"),
                        nulls_first=True,
                    ),
                    django.db.models.expressions.OrderBy(
                        django.db.models.expressions.F("parent__name"), nulls_first=True
                    ),
                    "sort_order",
                    "name",
                ],
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
            bases=(
                wagtail.search.index.Indexed,
                networkapi.wagtailpages.pagemodels.mixin.snippets.LocalizedSnippet,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="ContentAuthor",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                ("name", models.CharField(max_length=70)),
                (
                    "image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="CTA",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        default="",
                        help_text="Identify this component for other editors",
                        max_length=100,
                    ),
                ),
                (
                    "header",
                    models.CharField(
                        blank=True,
                        help_text="Heading that will display on page for this component",
                        max_length=500,
                    ),
                ),
                (
                    "description",
                    wagtail.fields.RichTextField(blank=True, help_text="Body (richtext) of component"),
                ),
                (
                    "newsletter",
                    models.CharField(
                        default="mozilla-foundation",
                        help_text="The (pre-existing) SalesForce newsletter to sign up for",
                        max_length=100,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "CTA",
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="DonationModal",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "name",
                    models.CharField(
                        default="",
                        help_text="Identify this component for other editors",
                        max_length=100,
                    ),
                ),
                (
                    "header",
                    models.CharField(
                        default="Thanks for signing! While you're here, we need your help.",
                        help_text="Donation header",
                        max_length=500,
                    ),
                ),
                (
                    "body",
                    models.TextField(
                        default="Mozilla is a nonprofit organization fighting for a healthy internet, where privacy is included by design and you have more control over your personal information. We depend on contributions from people like you to carry out this work. Can you donate today?",
                        help_text="Donation text",
                    ),
                ),
                (
                    "donate_text",
                    models.CharField(
                        default="Yes, I'll chip in",
                        help_text="Donate button label",
                        max_length=150,
                    ),
                ),
                (
                    "dismiss_text",
                    models.CharField(
                        default="No thanks",
                        help_text="Dismiss button label",
                        max_length=150,
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Donation CTA",
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="FocusArea",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of this area of focus. Max. 100 characters.",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description of this area of focus. Max. 300 characters.",
                        max_length=300,
                    ),
                ),
                (
                    "interest_icon",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="interest_icon",
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
                (
                    "page",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "verbose_name": "Area of focus",
                "verbose_name_plural": "Areas of focus",
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="Homepage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "hero_headline",
                    models.CharField(blank=True, help_text="Hero story headline", max_length=80),
                ),
                ("hero_button_text", models.CharField(blank=True, max_length=50)),
                ("hero_button_url", models.URLField(blank=True)),
                (
                    "spotlight_headline",
                    models.CharField(blank=True, help_text="Spotlight headline", max_length=140),
                ),
                ("cause_statement", models.CharField(default="", max_length=250)),
                (
                    "cause_statement_link_text",
                    models.CharField(blank=True, max_length=80),
                ),
                ("quote_text", models.CharField(default="", max_length=450)),
                ("quote_source_name", models.CharField(default="", max_length=100)),
                (
                    "quote_source_job_title",
                    models.CharField(default="", max_length=100),
                ),
                (
                    "partner_heading",
                    models.CharField(default="Partner with us", max_length=75),
                ),
                ("partner_intro_text", models.TextField(blank=True)),
                (
                    "partner_page_text",
                    models.CharField(default="Let's work together", max_length=35),
                ),
                (
                    "take_action_title",
                    models.CharField(default="Take action", max_length=50),
                ),
                (
                    "cause_statement_link_page",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="cause_statement_link",
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "hero_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="hero_image",
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "partner_background_image",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "partner_page",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="partner_internal_link",
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "quote_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="quote_image",
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                        verbose_name="Search image",
                    ),
                ),
                (
                    "spotlight_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="spotlight_image",
                        to="wagtailimages.image",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                wagtailmetadata.models.WagtailImageMetadataMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="IndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("header", models.CharField(blank=True, max_length=250)),
                (
                    "intro",
                    models.CharField(
                        blank=True,
                        help_text="Intro paragraph to show in hero cutout box",
                        max_length=250,
                    ),
                ),
                (
                    "page_size",
                    models.IntegerField(
                        choices=[(4, "4"), (8, "8"), (12, "12"), (24, "24")],
                        default=12,
                        help_text="The number of entries to show by default, and per incremental load",
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                        verbose_name="Search image",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                wagtailmetadata.models.WagtailImageMetadataMixin,
                wagtail.contrib.routable_page.models.RoutablePageMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="ModularPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("header", models.CharField(blank=True, max_length=250)),
                (
                    "narrowed_page_content",
                    models.BooleanField(
                        default=False,
                        help_text="For text-heavy pages, turn this on to reduce the overall width of the content on the page.",
                    ),
                ),
                (
                    "zen_nav",
                    models.BooleanField(
                        default=True,
                        help_text="For secondary nav pages, use this to collapse the primary nav under a toggle hamburger.",
                    ),
                ),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            (
                                "paragraph",
                                wagtail.blocks.RichTextBlock(
                                    features=[
                                        "bold",
                                        "italic",
                                        "link",
                                        "h2",
                                        "h3",
                                        "h4",
                                        "h5",
                                        "ol",
                                        "ul",
                                        "hr",
                                        "large",
                                    ],
                                    template="wagtailpages/blocks/rich_text_block.html",
                                ),
                            ),
                            (
                                "card_grid",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "cards",
                                            wagtail.blocks.ListBlock(
                                                wagtail.blocks.StructBlock(
                                                    [
                                                        (
                                                            "image",
                                                            wagtail.images.blocks.ImageChooserBlock(),
                                                        ),
                                                        (
                                                            "alt_text",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Alt text for card's image.",
                                                                required=False,
                                                            ),
                                                        ),
                                                        (
                                                            "title",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Heading for the card."
                                                            ),
                                                        ),
                                                        (
                                                            "body",
                                                            wagtail.blocks.TextBlock(
                                                                help_text="Body text of the card."
                                                            ),
                                                        ),
                                                        (
                                                            "link_url",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Optional URL that this card should link out to. (Note: If left blank, link will not render.) ",
                                                                required=False,
                                                            ),
                                                        ),
                                                        (
                                                            "link_label",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Optional Label for the URL link above. (Note: If left blank, link will not render.) ",
                                                                required=False,
                                                            ),
                                                        ),
                                                    ]
                                                ),
                                                help_text="Please use a minimum of 2 cards.",
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "image",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "altText",
                                            wagtail.blocks.CharBlock(
                                                help_text="Image description (for screen readers).",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "captionURL",
                                            wagtail.blocks.CharBlock(
                                                help_text="Optional URL that this caption should link out to.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "image_width",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("normal", "Normal"),
                                                    ("wide", "Wide"),
                                                    ("full_width", "Full Width"),
                                                ],
                                                help_text="Wide images are col-12, Full-Width Images reach both ends of the screen (16:6 images recommended for full width)",
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "image_text",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "altText",
                                            wagtail.blocks.CharBlock(
                                                help_text="Image description (for screen readers).",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "text",
                                            wagtail.blocks.RichTextBlock(
                                                features=[
                                                    "bold",
                                                    "italic",
                                                    "link",
                                                    "h2",
                                                    "h3",
                                                    "h4",
                                                    "h5",
                                                    "ol",
                                                    "ul",
                                                    "hr",
                                                ]
                                            ),
                                        ),
                                        (
                                            "url",
                                            wagtail.blocks.CharBlock(
                                                help_text="Optional URL that this image should link out to.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "top_divider",
                                            wagtail.blocks.BooleanBlock(
                                                help_text="Optional divider above content block.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "bottom_divider",
                                            wagtail.blocks.BooleanBlock(
                                                help_text="Optional divider below content block.",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "image_text_mini",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "altText",
                                            wagtail.blocks.CharBlock(
                                                help_text="Image description (for screen readers).",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "text",
                                            wagtail.blocks.RichTextBlock(features=["bold", "italic", "link"]),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "image_grid",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "grid_items",
                                            wagtail.blocks.ListBlock(
                                                wagtail.blocks.StructBlock(
                                                    [
                                                        (
                                                            "image",
                                                            wagtail.images.blocks.ImageChooserBlock(),
                                                        ),
                                                        (
                                                            "alt_text",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Alt text for this image.",
                                                                required=False,
                                                            ),
                                                        ),
                                                        (
                                                            "caption",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Please remember to properly attribute any images we use.",
                                                                required=False,
                                                            ),
                                                        ),
                                                        (
                                                            "url",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Optional URL that this figure should link out to.",
                                                                required=False,
                                                            ),
                                                        ),
                                                        (
                                                            "square_image",
                                                            wagtail.blocks.BooleanBlock(
                                                                default=True,
                                                                help_text="If left checked, the image will be cropped to be square.",
                                                                required=False,
                                                            ),
                                                        ),
                                                    ]
                                                )
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "video",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "url",
                                            wagtail.blocks.CharBlock(
                                                help_text="For YouTube: go to your YouTube video and click “Share,” then “Embed,” and then copy and paste the provided URL only. For example: https://www.youtube.com/embed/3FIVXBawyQw For Vimeo: follow similar steps to grab the embed URL. For example: https://player.vimeo.com/video/9004979"
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "captionURL",
                                            wagtail.blocks.CharBlock(
                                                help_text="Optional URL for caption to link to.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "video_width",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("normal", "Normal"),
                                                    ("wide", "Wide"),
                                                    ("full_width", "Full Width"),
                                                ],
                                                help_text="Wide videos are col-12, Full-Width videos reach both ends of the screen.",
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "iframe",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "url",
                                            wagtail.blocks.CharBlock(
                                                help_text="Please note that only URLs from allow-listed domains will work."
                                            ),
                                        ),
                                        (
                                            "height",
                                            wagtail.blocks.IntegerBlock(
                                                help_text="Optional integer pixel value for custom iFrame height",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "captionURL",
                                            wagtail.blocks.CharBlock(
                                                help_text="Optional URL that this caption should link out to.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "iframe_width",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("normal", "Normal"),
                                                    ("wide", "Wide"),
                                                    ("full_width", "Full Width"),
                                                ],
                                                help_text="Wide iframes are col-12, Full-Width iframes reach both ends of the screen",
                                            ),
                                        ),
                                        (
                                            "disable_scroll",
                                            wagtail.blocks.BooleanBlock(
                                                default=False,
                                                help_text='Checking this will add "scrolling=no" to the iframe. Use this if your iframe is rendering an unnecessary scroll bar or whitespace below it.',
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "linkbutton",
                                wagtail.blocks.StructBlock(
                                    [
                                        ("label", wagtail.blocks.CharBlock()),
                                        ("URL", wagtail.blocks.CharBlock()),
                                        (
                                            "styling",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("btn-primary", "Primary button"),
                                                    (
                                                        "btn-secondary",
                                                        "Secondary button",
                                                    ),
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "spacer",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "size",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("1", "quarter spacing"),
                                                    ("2", "half spacing"),
                                                    ("3", "single spacing"),
                                                    ("4", "one and a half spacing"),
                                                    ("5", "triple spacing"),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "single_quote",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "quote",
                                            wagtail.blocks.RichTextBlock(features=["bold"]),
                                        ),
                                        (
                                            "attribution",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "attribution_info",
                                            wagtail.blocks.RichTextBlock(
                                                features=["bold", "link", "large"],
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "pulse_listing",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "search_terms",
                                            wagtail.blocks.CharBlock(
                                                help_text="Test your search at mozillapulse.org/search",
                                                label="Search",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "max_number_of_results",
                                            wagtail.blocks.IntegerBlock(
                                                default=6,
                                                help_text="Choose 1-12. If you want visitors to see more, link to a search or tag on Pulse.",
                                                max_value=12,
                                                min_value=0,
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "only_featured_entries",
                                            wagtail.blocks.BooleanBlock(
                                                default=False,
                                                help_text="Featured items are selected by Pulse moderators.",
                                                label="Display only featured entries",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "newest_first",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    (
                                                        "True",
                                                        "Show newer entries first",
                                                    ),
                                                    (
                                                        "False",
                                                        "Show older entries first",
                                                    ),
                                                ],
                                                label="Sort",
                                            ),
                                        ),
                                        (
                                            "advanced_filter_header",
                                            wagtail.blocks.static_block.StaticBlock(
                                                admin_text="-------- ADVANCED FILTERS: OPTIONS TO DISPLAY FEWER, MORE TARGETED RESULTS. --------",
                                                label=" ",
                                            ),
                                        ),
                                        (
                                            "issues",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("all", "All"),
                                                    (
                                                        "Decentralization",
                                                        "Decentralization",
                                                    ),
                                                    (
                                                        "Digital Inclusion",
                                                        "Digital Inclusion",
                                                    ),
                                                    (
                                                        "Online Privacy & Security",
                                                        "Online Privacy & Security",
                                                    ),
                                                    (
                                                        "Open Innovation",
                                                        "Open Innovation",
                                                    ),
                                                    ("Web Literacy", "Web Literacy"),
                                                ]
                                            ),
                                        ),
                                        (
                                            "help",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("all", "All"),
                                                    ("Attend", "Attend"),
                                                    (
                                                        "Create content",
                                                        "Create content",
                                                    ),
                                                    ("Code", "Code"),
                                                    ("Design", "Design"),
                                                    ("Fundraise", "Fundraise"),
                                                    (
                                                        "Join community",
                                                        "Join community",
                                                    ),
                                                    (
                                                        "Localize & translate",
                                                        "Localize & translate",
                                                    ),
                                                    ("Mentor", "Mentor"),
                                                    (
                                                        "Plan & organize",
                                                        "Plan & organize",
                                                    ),
                                                    ("Promote", "Promote"),
                                                    ("Take action", "Take action"),
                                                    (
                                                        "Test & feedback",
                                                        "Test & feedback",
                                                    ),
                                                    (
                                                        "Write documentation",
                                                        "Write documentation",
                                                    ),
                                                ],
                                                label="Type of help needed",
                                            ),
                                        ),
                                        (
                                            "direct_link",
                                            wagtail.blocks.BooleanBlock(
                                                default=False,
                                                help_text="Checked: user goes to project link. Unchecked: user goes to pulse entry",
                                                label="Direct link",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "profile_listing",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "max_number_of_results",
                                            wagtail.blocks.IntegerBlock(
                                                default=12,
                                                help_text="Pick up to 48 profiles.",
                                                max_value=48,
                                                min_value=1,
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "advanced_filter_header",
                                            wagtail.blocks.static_block.StaticBlock(
                                                admin_text="-------- ADVANCED FILTERS: OPTIONS TO DISPLAY FEWER, MORE TARGETED RESULTS. --------",
                                                label=" ",
                                            ),
                                        ),
                                        (
                                            "profile_type",
                                            wagtail.blocks.CharBlock(
                                                default="",
                                                help_text="Example: Fellow.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "program_type",
                                            wagtail.blocks.CharBlock(
                                                default="",
                                                help_text="Example: Tech Policy.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "year",
                                            wagtail.blocks.CharBlock(default="", required=False),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "profile_by_id",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "ids",
                                            wagtail.blocks.CharBlock(
                                                help_text="Show profiles for pulse users with specific profile ids (mozillapulse.org/profile/[##]). For multiple profiles, specify a comma separated list (e.g. 85,105,332).",
                                                label="Profile by ID",
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "profile_directory",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "max_number_of_results",
                                            wagtail.blocks.IntegerBlock(
                                                default=12,
                                                help_text="Pick up to 48 profiles.",
                                                max_value=48,
                                                min_value=1,
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "advanced_filter_header",
                                            wagtail.blocks.static_block.StaticBlock(
                                                admin_text="-------- ADVANCED FILTERS: OPTIONS TO DISPLAY FEWER, MORE TARGETED RESULTS. --------",
                                                label=" ",
                                            ),
                                        ),
                                        (
                                            "profile_type",
                                            wagtail.blocks.CharBlock(
                                                default="",
                                                help_text="Example: Fellow.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "program_type",
                                            wagtail.blocks.CharBlock(
                                                default="",
                                                help_text="Example: Tech Policy.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "year",
                                            wagtail.blocks.CharBlock(default="", required=False),
                                        ),
                                        (
                                            "filter_values",
                                            wagtail.blocks.CharBlock(
                                                default="2019,2018,2017,2016,2015,2014,2013",
                                                help_text="Example: 2019,2018,2017,2016,2015,2014,2013",
                                                required=True,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "recent_blog_entries",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "title",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "tag_filter",
                                            wagtail.blocks.CharBlock(
                                                help_text="Test this filter at foundation.mozilla.org/blog/tags/",
                                                label="Filter by Tag",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "category_filter",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("All", "All"),
                                                    ("Advocacy", "Advocacy"),
                                                    ("Common Voice", "Common Voice"),
                                                    (
                                                        "Fellowships & Awards",
                                                        "Fellowships & Awards",
                                                    ),
                                                    ("Insights", "Insights"),
                                                    ("Moz News Beat", "Moz News Beat"),
                                                    (
                                                        "Mozilla Explains",
                                                        "Mozilla Explains",
                                                    ),
                                                    (
                                                        "Mozilla Festival",
                                                        "Mozilla Festival",
                                                    ),
                                                    (
                                                        "Open Leadership & Events",
                                                        "Open Leadership & Events",
                                                    ),
                                                ],
                                                help_text="Test this filter at foundation.mozilla.org/blog/category/",
                                                label="Filter by Category",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "top_divider",
                                            wagtail.blocks.BooleanBlock(
                                                help_text="Optional divider above content block.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "bottom_divider",
                                            wagtail.blocks.BooleanBlock(
                                                help_text="Optional divider below content block.",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "blog_set",
                                wagtail.blocks.StructBlock(
                                    [
                                        ("title", wagtail.blocks.CharBlock()),
                                        (
                                            "top_divider",
                                            wagtail.blocks.BooleanBlock(
                                                help_text="Optional divider above content block.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "bottom_divider",
                                            wagtail.blocks.BooleanBlock(
                                                help_text="Optional divider below content block.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "blog_pages",
                                            wagtail.blocks.ListBlock(
                                                wagtail.blocks.PageChooserBlock(page_type=["wagtailpages.BlogPage"])
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "airtable",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "url",
                                            wagtail.blocks.URLBlock(
                                                help_text="Copied from the Airtable embed code. The word 'embed' will be in the url"
                                            ),
                                        ),
                                        (
                                            "height",
                                            wagtail.blocks.IntegerBlock(
                                                default=533,
                                                help_text="The pixel height on desktop view, usually copied from the Airtable embed code",
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "typeform",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "embed_id",
                                            wagtail.blocks.CharBlock(
                                                help_text="The embed id of your Typeform page (e.g. if the form is on admin.typeform.com/form/e8zScc6t, the id will be: e8zScc6t)",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "button_type",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("btn-primary", "Primary button"),
                                                    (
                                                        "btn-secondary",
                                                        "Secondary button",
                                                    ),
                                                ]
                                            ),
                                        ),
                                        (
                                            "button_text",
                                            wagtail.blocks.CharBlock(
                                                help_text="This is a text prompt for users to open the typeform content",
                                                required=True,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "datawrapper",
                                wagtail.embeds.blocks.EmbedBlock(
                                    help_text='Enter the "visualization only" link of the Datawrapper chart. It looks something like this: https://datawrapper.dwcdn.net/KwSKp/1/',
                                    icon="image",
                                    template="wagtailpages/blocks/datawrapper_block.html",
                                ),
                            ),
                        ]
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                        verbose_name="Search image",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                wagtailmetadata.models.WagtailImageMetadataMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="PrimaryPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("header", models.CharField(blank=True, max_length=250)),
                (
                    "intro",
                    models.CharField(
                        blank=True,
                        help_text="Intro paragraph to show in hero cutout box",
                        max_length=350,
                    ),
                ),
                (
                    "narrowed_page_content",
                    models.BooleanField(
                        default=False,
                        help_text="For text-heavy pages, turn this on to reduce the overall width of the content on the page.",
                    ),
                ),
                (
                    "zen_nav",
                    models.BooleanField(
                        default=False,
                        help_text="For secondary nav pages, use this to collapse the primary nav under a toggle hamburger.",
                    ),
                ),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            (
                                "paragraph",
                                wagtail.blocks.RichTextBlock(
                                    features=[
                                        "bold",
                                        "italic",
                                        "link",
                                        "h2",
                                        "h3",
                                        "h4",
                                        "h5",
                                        "ol",
                                        "ul",
                                        "hr",
                                        "large",
                                    ],
                                    template="wagtailpages/blocks/rich_text_block.html",
                                ),
                            ),
                            (
                                "card_grid",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "cards",
                                            wagtail.blocks.ListBlock(
                                                wagtail.blocks.StructBlock(
                                                    [
                                                        (
                                                            "image",
                                                            wagtail.images.blocks.ImageChooserBlock(),
                                                        ),
                                                        (
                                                            "alt_text",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Alt text for card's image.",
                                                                required=False,
                                                            ),
                                                        ),
                                                        (
                                                            "title",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Heading for the card."
                                                            ),
                                                        ),
                                                        (
                                                            "body",
                                                            wagtail.blocks.TextBlock(
                                                                help_text="Body text of the card."
                                                            ),
                                                        ),
                                                        (
                                                            "link_url",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Optional URL that this card should link out to. (Note: If left blank, link will not render.) ",
                                                                required=False,
                                                            ),
                                                        ),
                                                        (
                                                            "link_label",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Optional Label for the URL link above. (Note: If left blank, link will not render.) ",
                                                                required=False,
                                                            ),
                                                        ),
                                                    ]
                                                ),
                                                help_text="Please use a minimum of 2 cards.",
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "image",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "altText",
                                            wagtail.blocks.CharBlock(
                                                help_text="Image description (for screen readers).",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "captionURL",
                                            wagtail.blocks.CharBlock(
                                                help_text="Optional URL that this caption should link out to.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "image_width",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("normal", "Normal"),
                                                    ("wide", "Wide"),
                                                    ("full_width", "Full Width"),
                                                ],
                                                help_text="Wide images are col-12, Full-Width Images reach both ends of the screen (16:6 images recommended for full width)",
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "image_text",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "altText",
                                            wagtail.blocks.CharBlock(
                                                help_text="Image description (for screen readers).",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "text",
                                            wagtail.blocks.RichTextBlock(
                                                features=[
                                                    "bold",
                                                    "italic",
                                                    "link",
                                                    "h2",
                                                    "h3",
                                                    "h4",
                                                    "h5",
                                                    "ol",
                                                    "ul",
                                                    "hr",
                                                ]
                                            ),
                                        ),
                                        (
                                            "url",
                                            wagtail.blocks.CharBlock(
                                                help_text="Optional URL that this image should link out to.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "top_divider",
                                            wagtail.blocks.BooleanBlock(
                                                help_text="Optional divider above content block.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "bottom_divider",
                                            wagtail.blocks.BooleanBlock(
                                                help_text="Optional divider below content block.",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "image_text_mini",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "altText",
                                            wagtail.blocks.CharBlock(
                                                help_text="Image description (for screen readers).",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "text",
                                            wagtail.blocks.RichTextBlock(features=["bold", "italic", "link"]),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "image_grid",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "grid_items",
                                            wagtail.blocks.ListBlock(
                                                wagtail.blocks.StructBlock(
                                                    [
                                                        (
                                                            "image",
                                                            wagtail.images.blocks.ImageChooserBlock(),
                                                        ),
                                                        (
                                                            "alt_text",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Alt text for this image.",
                                                                required=False,
                                                            ),
                                                        ),
                                                        (
                                                            "caption",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Please remember to properly attribute any images we use.",
                                                                required=False,
                                                            ),
                                                        ),
                                                        (
                                                            "url",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Optional URL that this figure should link out to.",
                                                                required=False,
                                                            ),
                                                        ),
                                                        (
                                                            "square_image",
                                                            wagtail.blocks.BooleanBlock(
                                                                default=True,
                                                                help_text="If left checked, the image will be cropped to be square.",
                                                                required=False,
                                                            ),
                                                        ),
                                                    ]
                                                )
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "video",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "url",
                                            wagtail.blocks.CharBlock(
                                                help_text="For YouTube: go to your YouTube video and click “Share,” then “Embed,” and then copy and paste the provided URL only. For example: https://www.youtube.com/embed/3FIVXBawyQw For Vimeo: follow similar steps to grab the embed URL. For example: https://player.vimeo.com/video/9004979"
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "captionURL",
                                            wagtail.blocks.CharBlock(
                                                help_text="Optional URL for caption to link to.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "video_width",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("normal", "Normal"),
                                                    ("wide", "Wide"),
                                                    ("full_width", "Full Width"),
                                                ],
                                                help_text="Wide videos are col-12, Full-Width videos reach both ends of the screen.",
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "iframe",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "url",
                                            wagtail.blocks.CharBlock(
                                                help_text="Please note that only URLs from allow-listed domains will work."
                                            ),
                                        ),
                                        (
                                            "height",
                                            wagtail.blocks.IntegerBlock(
                                                help_text="Optional integer pixel value for custom iFrame height",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "captionURL",
                                            wagtail.blocks.CharBlock(
                                                help_text="Optional URL that this caption should link out to.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "iframe_width",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("normal", "Normal"),
                                                    ("wide", "Wide"),
                                                    ("full_width", "Full Width"),
                                                ],
                                                help_text="Wide iframes are col-12, Full-Width iframes reach both ends of the screen",
                                            ),
                                        ),
                                        (
                                            "disable_scroll",
                                            wagtail.blocks.BooleanBlock(
                                                default=False,
                                                help_text='Checking this will add "scrolling=no" to the iframe. Use this if your iframe is rendering an unnecessary scroll bar or whitespace below it.',
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "linkbutton",
                                wagtail.blocks.StructBlock(
                                    [
                                        ("label", wagtail.blocks.CharBlock()),
                                        ("URL", wagtail.blocks.CharBlock()),
                                        (
                                            "styling",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("btn-primary", "Primary button"),
                                                    (
                                                        "btn-secondary",
                                                        "Secondary button",
                                                    ),
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "spacer",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "size",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("1", "quarter spacing"),
                                                    ("2", "half spacing"),
                                                    ("3", "single spacing"),
                                                    ("4", "one and a half spacing"),
                                                    ("5", "triple spacing"),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "single_quote",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "quote",
                                            wagtail.blocks.RichTextBlock(features=["bold"]),
                                        ),
                                        (
                                            "attribution",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "attribution_info",
                                            wagtail.blocks.RichTextBlock(
                                                features=["bold", "link", "large"],
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "pulse_listing",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "search_terms",
                                            wagtail.blocks.CharBlock(
                                                help_text="Test your search at mozillapulse.org/search",
                                                label="Search",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "max_number_of_results",
                                            wagtail.blocks.IntegerBlock(
                                                default=6,
                                                help_text="Choose 1-12. If you want visitors to see more, link to a search or tag on Pulse.",
                                                max_value=12,
                                                min_value=0,
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "only_featured_entries",
                                            wagtail.blocks.BooleanBlock(
                                                default=False,
                                                help_text="Featured items are selected by Pulse moderators.",
                                                label="Display only featured entries",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "newest_first",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    (
                                                        "True",
                                                        "Show newer entries first",
                                                    ),
                                                    (
                                                        "False",
                                                        "Show older entries first",
                                                    ),
                                                ],
                                                label="Sort",
                                            ),
                                        ),
                                        (
                                            "advanced_filter_header",
                                            wagtail.blocks.static_block.StaticBlock(
                                                admin_text="-------- ADVANCED FILTERS: OPTIONS TO DISPLAY FEWER, MORE TARGETED RESULTS. --------",
                                                label=" ",
                                            ),
                                        ),
                                        (
                                            "issues",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("all", "All"),
                                                    (
                                                        "Decentralization",
                                                        "Decentralization",
                                                    ),
                                                    (
                                                        "Digital Inclusion",
                                                        "Digital Inclusion",
                                                    ),
                                                    (
                                                        "Online Privacy & Security",
                                                        "Online Privacy & Security",
                                                    ),
                                                    (
                                                        "Open Innovation",
                                                        "Open Innovation",
                                                    ),
                                                    ("Web Literacy", "Web Literacy"),
                                                ]
                                            ),
                                        ),
                                        (
                                            "help",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("all", "All"),
                                                    ("Attend", "Attend"),
                                                    (
                                                        "Create content",
                                                        "Create content",
                                                    ),
                                                    ("Code", "Code"),
                                                    ("Design", "Design"),
                                                    ("Fundraise", "Fundraise"),
                                                    (
                                                        "Join community",
                                                        "Join community",
                                                    ),
                                                    (
                                                        "Localize & translate",
                                                        "Localize & translate",
                                                    ),
                                                    ("Mentor", "Mentor"),
                                                    (
                                                        "Plan & organize",
                                                        "Plan & organize",
                                                    ),
                                                    ("Promote", "Promote"),
                                                    ("Take action", "Take action"),
                                                    (
                                                        "Test & feedback",
                                                        "Test & feedback",
                                                    ),
                                                    (
                                                        "Write documentation",
                                                        "Write documentation",
                                                    ),
                                                ],
                                                label="Type of help needed",
                                            ),
                                        ),
                                        (
                                            "direct_link",
                                            wagtail.blocks.BooleanBlock(
                                                default=False,
                                                help_text="Checked: user goes to project link. Unchecked: user goes to pulse entry",
                                                label="Direct link",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "profile_listing",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "max_number_of_results",
                                            wagtail.blocks.IntegerBlock(
                                                default=12,
                                                help_text="Pick up to 48 profiles.",
                                                max_value=48,
                                                min_value=1,
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "advanced_filter_header",
                                            wagtail.blocks.static_block.StaticBlock(
                                                admin_text="-------- ADVANCED FILTERS: OPTIONS TO DISPLAY FEWER, MORE TARGETED RESULTS. --------",
                                                label=" ",
                                            ),
                                        ),
                                        (
                                            "profile_type",
                                            wagtail.blocks.CharBlock(
                                                default="",
                                                help_text="Example: Fellow.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "program_type",
                                            wagtail.blocks.CharBlock(
                                                default="",
                                                help_text="Example: Tech Policy.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "year",
                                            wagtail.blocks.CharBlock(default="", required=False),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "profile_by_id",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "ids",
                                            wagtail.blocks.CharBlock(
                                                help_text="Show profiles for pulse users with specific profile ids (mozillapulse.org/profile/[##]). For multiple profiles, specify a comma separated list (e.g. 85,105,332).",
                                                label="Profile by ID",
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "profile_directory",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "max_number_of_results",
                                            wagtail.blocks.IntegerBlock(
                                                default=12,
                                                help_text="Pick up to 48 profiles.",
                                                max_value=48,
                                                min_value=1,
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "advanced_filter_header",
                                            wagtail.blocks.static_block.StaticBlock(
                                                admin_text="-------- ADVANCED FILTERS: OPTIONS TO DISPLAY FEWER, MORE TARGETED RESULTS. --------",
                                                label=" ",
                                            ),
                                        ),
                                        (
                                            "profile_type",
                                            wagtail.blocks.CharBlock(
                                                default="",
                                                help_text="Example: Fellow.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "program_type",
                                            wagtail.blocks.CharBlock(
                                                default="",
                                                help_text="Example: Tech Policy.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "year",
                                            wagtail.blocks.CharBlock(default="", required=False),
                                        ),
                                        (
                                            "filter_values",
                                            wagtail.blocks.CharBlock(
                                                default="2019,2018,2017,2016,2015,2014,2013",
                                                help_text="Example: 2019,2018,2017,2016,2015,2014,2013",
                                                required=True,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "recent_blog_entries",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "title",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "tag_filter",
                                            wagtail.blocks.CharBlock(
                                                help_text="Test this filter at foundation.mozilla.org/blog/tags/",
                                                label="Filter by Tag",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "category_filter",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("All", "All"),
                                                    ("Advocacy", "Advocacy"),
                                                    ("Common Voice", "Common Voice"),
                                                    (
                                                        "Fellowships & Awards",
                                                        "Fellowships & Awards",
                                                    ),
                                                    ("Insights", "Insights"),
                                                    ("Moz News Beat", "Moz News Beat"),
                                                    (
                                                        "Mozilla Explains",
                                                        "Mozilla Explains",
                                                    ),
                                                    (
                                                        "Mozilla Festival",
                                                        "Mozilla Festival",
                                                    ),
                                                    (
                                                        "Open Leadership & Events",
                                                        "Open Leadership & Events",
                                                    ),
                                                ],
                                                help_text="Test this filter at foundation.mozilla.org/blog/category/",
                                                label="Filter by Category",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "top_divider",
                                            wagtail.blocks.BooleanBlock(
                                                help_text="Optional divider above content block.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "bottom_divider",
                                            wagtail.blocks.BooleanBlock(
                                                help_text="Optional divider below content block.",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "blog_set",
                                wagtail.blocks.StructBlock(
                                    [
                                        ("title", wagtail.blocks.CharBlock()),
                                        (
                                            "top_divider",
                                            wagtail.blocks.BooleanBlock(
                                                help_text="Optional divider above content block.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "bottom_divider",
                                            wagtail.blocks.BooleanBlock(
                                                help_text="Optional divider below content block.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "blog_pages",
                                            wagtail.blocks.ListBlock(
                                                wagtail.blocks.PageChooserBlock(page_type=["wagtailpages.BlogPage"])
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "airtable",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "url",
                                            wagtail.blocks.URLBlock(
                                                help_text="Copied from the Airtable embed code. The word 'embed' will be in the url"
                                            ),
                                        ),
                                        (
                                            "height",
                                            wagtail.blocks.IntegerBlock(
                                                default=533,
                                                help_text="The pixel height on desktop view, usually copied from the Airtable embed code",
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "typeform",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "embed_id",
                                            wagtail.blocks.CharBlock(
                                                help_text="The embed id of your Typeform page (e.g. if the form is on admin.typeform.com/form/e8zScc6t, the id will be: e8zScc6t)",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "button_type",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("btn-primary", "Primary button"),
                                                    (
                                                        "btn-secondary",
                                                        "Secondary button",
                                                    ),
                                                ]
                                            ),
                                        ),
                                        (
                                            "button_text",
                                            wagtail.blocks.CharBlock(
                                                help_text="This is a text prompt for users to open the typeform content",
                                                required=True,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "datawrapper",
                                wagtail.embeds.blocks.EmbedBlock(
                                    help_text='Enter the "visualization only" link of the Datawrapper chart. It looks something like this: https://datawrapper.dwcdn.net/KwSKp/1/',
                                    icon="image",
                                    template="wagtailpages/blocks/datawrapper_block.html",
                                ),
                            ),
                        ]
                    ),
                ),
                (
                    "banner",
                    models.ForeignKey(
                        blank=True,
                        help_text="Choose an image that's bigger than 4032px x 1152px with aspect ratio 3.5:1",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="primary_banner",
                        to="wagtailimages.image",
                        verbose_name="Hero Image",
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                        verbose_name="Search image",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                wagtailmetadata.models.WagtailImageMetadataMixin,
                networkapi.wagtailpages.pagemodels.mixin.foundation_banner_inheritance.FoundationBannerInheritanceMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="ProductPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "airtable_record_id",
                    models.CharField(blank=True, db_index=True, max_length=35),
                ),
                (
                    "privacy_ding",
                    models.BooleanField(default=False, verbose_name="*privacy not included ding"),
                ),
                (
                    "adult_content",
                    models.BooleanField(default=False, verbose_name="adult Content"),
                ),
                (
                    "uses_wifi",
                    models.BooleanField(default=False, verbose_name="uses WiFi"),
                ),
                (
                    "uses_bluetooth",
                    models.BooleanField(default=False, verbose_name="uses Bluetooth"),
                ),
                (
                    "review_date",
                    models.DateField(default=django.utils.timezone.now, verbose_name="review Date"),
                ),
                (
                    "company",
                    models.CharField(blank=True, max_length=100, verbose_name="company Name"),
                ),
                (
                    "blurb",
                    wagtail.fields.RichTextField(blank=True, verbose_name="intro Blurb"),
                ),
                (
                    "product_url",
                    models.URLField(blank=True, max_length=2048, verbose_name="product URL"),
                ),
                (
                    "worst_case",
                    wagtail.fields.RichTextField(
                        blank=True,
                        verbose_name="what could happen if something goes wrong?",
                    ),
                ),
                (
                    "tips_to_protect_yourself",
                    wagtail.fields.RichTextField(blank=True),
                ),
                (
                    "mozilla_says",
                    models.BooleanField(
                        blank=True,
                        help_text="Use 'Yes' for Thumbs Up, 'No' for Thumbs Down, and 'Unknown' for Thumb Sideways",
                        null=True,
                        verbose_name="mozilla Says",
                    ),
                ),
                (
                    "time_researched",
                    models.PositiveIntegerField(default=0, verbose_name="time spent on research"),
                ),
                (
                    "signup_requires_email",
                    networkapi.wagtailpages.fields.ExtendedYesNoField(verbose_name="email"),
                ),
                (
                    "signup_requires_phone",
                    networkapi.wagtailpages.fields.ExtendedYesNoField(verbose_name="phone"),
                ),
                (
                    "signup_requires_third_party_account",
                    networkapi.wagtailpages.fields.ExtendedYesNoField(verbose_name="third-party account"),
                ),
                (
                    "signup_requirement_explanation",
                    models.TextField(
                        blank=True,
                        max_length=5000,
                        verbose_name="signup requirement description",
                    ),
                ),
                (
                    "how_does_it_use_data_collected",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="How does this product use the data collected?",
                        max_length=5000,
                    ),
                ),
                (
                    "data_collection_policy_is_bad",
                    models.BooleanField(default=False, verbose_name="mini-ding for bad data use?"),
                ),
                (
                    "user_friendly_privacy_policy",
                    networkapi.wagtailpages.fields.ExtendedYesNoField(
                        verbose_name="user-friendly privacy information?"
                    ),
                ),
                (
                    "user_friendly_privacy_policy_helptext",
                    models.TextField(
                        blank=True,
                        max_length=5000,
                        verbose_name="user-friendly privacy description",
                    ),
                ),
                (
                    "show_ding_for_minimum_security_standards",
                    models.BooleanField(
                        default=False,
                        verbose_name="mini-ding for doesnt meet Minimum Security Standards",
                    ),
                ),
                (
                    "meets_minimum_security_standards",
                    models.BooleanField(
                        blank=True,
                        null=True,
                        verbose_name="does this product meet our Minimum Security Standards?",
                    ),
                ),
                (
                    "uses_encryption",
                    networkapi.wagtailpages.fields.ExtendedYesNoField(verbose_name="encryption"),
                ),
                (
                    "uses_encryption_helptext",
                    models.TextField(blank=True, max_length=5000, verbose_name="description"),
                ),
                (
                    "security_updates",
                    networkapi.wagtailpages.fields.ExtendedYesNoField(),
                ),
                (
                    "security_updates_helptext",
                    models.TextField(blank=True, max_length=5000, verbose_name="description"),
                ),
                (
                    "strong_password",
                    networkapi.wagtailpages.fields.ExtendedYesNoField(),
                ),
                (
                    "strong_password_helptext",
                    models.TextField(blank=True, max_length=5000, verbose_name="description"),
                ),
                (
                    "manage_vulnerabilities",
                    networkapi.wagtailpages.fields.ExtendedYesNoField(verbose_name="manages security vulnerabilities"),
                ),
                (
                    "manage_vulnerabilities_helptext",
                    wagtail.fields.RichTextField(blank=True, max_length=5000),
                ),
                ("privacy_policy", networkapi.wagtailpages.fields.ExtendedYesNoField()),
                (
                    "privacy_policy_helptext",
                    models.TextField(blank=True, max_length=5000, verbose_name="description"),
                ),
                ("creepiness_value", models.IntegerField(default=0)),
                (
                    "image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                        verbose_name="Search image",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Page",
            },
            bases=(
                wagtailmetadata.models.WagtailImageMetadataMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="ProductPageVotes",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "vote_bins",
                    models.CharField(
                        default="0,0,0,0,0",
                        max_length=50,
                        validators=[django.core.validators.int_list_validator],
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PulseFilter",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Identify this filter for other editors.",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "filter_key",
                    models.CharField(
                        choices=[
                            ("profile_type", "Profile Type"),
                            ("program_type", "Program Type"),
                            ("program_year", "Program Year"),
                        ],
                        help_text="The profile detail to filter on.",
                        max_length=255,
                    ),
                ),
                (
                    "filter_key_label",
                    models.CharField(
                        help_text='A label for when displaying the filter type to users. (e.g. "Spaces" for program types)',
                        max_length=255,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RedirectingPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "URL",
                    models.URLField(help_text="The fully qualified URL that this page should map to."),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="BanneredCampaignPage",
            fields=[
                (
                    "primarypage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailpages.primarypage",
                    ),
                ),
                (
                    "cta",
                    models.ForeignKey(
                        blank=True,
                        help_text="Choose one of our call-to-action snippets, or create a new one.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="banner_page_for_cta",
                        to="wagtailpages.cta",
                    ),
                ),
            ],
            options={
                "verbose_name": "Banner Page",
                "verbose_name_plural": "Banner pages",
            },
            bases=("wagtailpages.primarypage",),
        ),
        migrations.CreateModel(
            name="BlogIndexPage",
            fields=[
                (
                    "indexpage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailpages.indexpage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailpages.indexpage",),
        ),
        migrations.CreateModel(
            name="CampaignIndexPage",
            fields=[
                (
                    "indexpage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailpages.indexpage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailpages.indexpage",),
        ),
        migrations.CreateModel(
            name="GeneralProductPage",
            fields=[
                (
                    "productpage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailpages.productpage",
                    ),
                ),
                (
                    "camera_device",
                    networkapi.wagtailpages.fields.ExtendedYesNoField(verbose_name="camera: Device"),
                ),
                (
                    "camera_app",
                    networkapi.wagtailpages.fields.ExtendedYesNoField(verbose_name="camera: App"),
                ),
                (
                    "microphone_device",
                    networkapi.wagtailpages.fields.ExtendedYesNoField(verbose_name="microphone: Device"),
                ),
                (
                    "microphone_app",
                    networkapi.wagtailpages.fields.ExtendedYesNoField(verbose_name="microphone: App"),
                ),
                (
                    "location_device",
                    networkapi.wagtailpages.fields.ExtendedYesNoField(verbose_name="tracks location: Device"),
                ),
                (
                    "location_app",
                    networkapi.wagtailpages.fields.ExtendedYesNoField(verbose_name="tracks location: App"),
                ),
                (
                    "personal_data_collected",
                    models.TextField(blank=True, max_length=5000, verbose_name="personal"),
                ),
                (
                    "biometric_data_collected",
                    models.TextField(blank=True, max_length=5000, verbose_name="body Related"),
                ),
                (
                    "social_data_collected",
                    models.TextField(blank=True, max_length=5000, verbose_name="social"),
                ),
                (
                    "how_can_you_control_your_data",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="How does this product let you control your data?",
                        max_length=5000,
                    ),
                ),
                (
                    "data_control_policy_is_bad",
                    models.BooleanField(default=False, verbose_name="mini-ding for bad data control?"),
                ),
                (
                    "company_track_record",
                    models.CharField(
                        choices=[
                            ("Great", "Great"),
                            ("Average", "Average"),
                            ("Needs Improvement", "Needs Improvement"),
                            ("Bad", "Bad"),
                        ],
                        default="Average",
                        max_length=20,
                        verbose_name="company's known track record?",
                    ),
                ),
                (
                    "track_record_is_bad",
                    models.BooleanField(default=False, verbose_name="mini-ding for bad track record"),
                ),
                (
                    "track_record_details",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Describe the track record of this company here.",
                        max_length=5000,
                    ),
                ),
                (
                    "offline_capable",
                    networkapi.wagtailpages.fields.ExtendedYesNoField(
                        verbose_name="can this product be used offline?"
                    ),
                ),
                (
                    "offline_use_description",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Describe how this product can be used offline.",
                        max_length=5000,
                    ),
                ),
                (
                    "uses_ai",
                    networkapi.wagtailpages.fields.ExtendedYesNoField(verbose_name="does the product use AI?"),
                ),
                (
                    "ai_helptext",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Helpful text around AI to show on the product page",
                        max_length=5000,
                    ),
                ),
                (
                    "ai_is_untrustworthy",
                    networkapi.wagtailpages.fields.ExtendedYesNoField(verbose_name="is this AI untrustworthy?"),
                ),
                (
                    "ai_is_untrustworthy_ding",
                    models.BooleanField(default=False, verbose_name="mini-ding for bad AI"),
                ),
                (
                    "ai_what_can_it_do",
                    wagtail.fields.RichTextField(
                        blank=True,
                        verbose_name="what kind of decisions does the AI make about you or for you?",
                    ),
                ),
                (
                    "ai_is_transparent",
                    networkapi.wagtailpages.fields.ExtendedYesNoField(
                        verbose_name="is the company transparent about how the AI works?"
                    ),
                ),
                (
                    "ai_is_transparent_helptext",
                    models.TextField(
                        blank=True,
                        max_length=5000,
                        verbose_name="aI transparency description",
                    ),
                ),
                (
                    "ai_can_user_control",
                    networkapi.wagtailpages.fields.ExtendedYesNoField(
                        verbose_name="does the user have control over the AI features?"
                    ),
                ),
                (
                    "ai_can_user_control_helptext",
                    models.TextField(
                        blank=True,
                        max_length=5000,
                        verbose_name="control of AI description",
                    ),
                ),
            ],
            options={
                "verbose_name": "General Product Page",
            },
            bases=("wagtailpages.productpage",),
        ),
        migrations.CreateModel(
            name="MiniSiteNameSpace",
            fields=[
                (
                    "modularpage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailpages.modularpage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailpages.modularpage",),
        ),
        migrations.CreateModel(
            name="NewsPage",
            fields=[
                (
                    "primarypage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailpages.primarypage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailpages.primarypage",),
        ),
        migrations.CreateModel(
            name="SoftwareProductPage",
            fields=[
                (
                    "productpage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailpages.productpage",
                    ),
                ),
                (
                    "handles_recordings_how",
                    models.TextField(blank=True, max_length=5000),
                ),
                (
                    "recording_alert",
                    networkapi.wagtailpages.fields.ExtendedYesNoField(null=True),
                ),
                (
                    "recording_alert_helptext",
                    models.TextField(blank=True, max_length=5000),
                ),
                (
                    "medical_privacy_compliant",
                    networkapi.wagtailpages.fields.ExtendedBoolean(),
                ),
                (
                    "medical_privacy_compliant_helptext",
                    models.TextField(blank=True, max_length=5000),
                ),
                ("host_controls", models.TextField(blank=True, max_length=5000)),
                (
                    "easy_to_learn_and_use",
                    networkapi.wagtailpages.fields.ExtendedBoolean(),
                ),
                (
                    "easy_to_learn_and_use_helptext",
                    models.TextField(blank=True, max_length=5000),
                ),
            ],
            options={
                "verbose_name": "Software Product Page",
            },
            bases=("wagtailpages.productpage",),
        ),
        migrations.CreateModel(
            name="Styleguide",
            fields=[
                (
                    "primarypage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailpages.primarypage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailpages.primarypage",),
        ),
        migrations.CreateModel(
            name="YoutubeRegretsReporterPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "headline",
                    models.CharField(blank=True, help_text="Page headline", max_length=500),
                ),
                (
                    "intro_text",
                    wagtail.fields.StreamField([("text", wagtail.blocks.CharBlock())]),
                ),
                (
                    "intro_images",
                    wagtail.fields.StreamField(
                        [
                            (
                                "image",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "altText",
                                            wagtail.blocks.CharBlock(
                                                help_text="Image description (for screen readers).",
                                                required=True,
                                            ),
                                        ),
                                    ]
                                ),
                            )
                        ]
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                        verbose_name="Search image",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                wagtailmetadata.models.WagtailImageMetadataMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="YoutubeRegretsReporterExtensionPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                        verbose_name="Search image",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                wagtailmetadata.models.WagtailImageMetadataMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="YoutubeRegretsPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "headline",
                    models.CharField(blank=True, help_text="Page headline", max_length=500),
                ),
                (
                    "intro_text",
                    wagtail.fields.StreamField([("text", wagtail.blocks.CharBlock())]),
                ),
                (
                    "intro_images",
                    wagtail.fields.StreamField(
                        [
                            (
                                "image",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "altText",
                                            wagtail.blocks.CharBlock(
                                                help_text="Image description (for screen readers).",
                                                required=True,
                                            ),
                                        ),
                                    ]
                                ),
                            )
                        ]
                    ),
                ),
                (
                    "faq",
                    wagtail.fields.StreamField(
                        [
                            (
                                "paragraph",
                                wagtail.blocks.RichTextBlock(
                                    features=[
                                        "bold",
                                        "italic",
                                        "link",
                                        "h2",
                                        "h3",
                                        "h4",
                                        "h5",
                                        "ol",
                                        "ul",
                                        "hr",
                                    ]
                                ),
                            )
                        ],
                        blank=True,
                    ),
                ),
                (
                    "regret_stories",
                    wagtail.fields.StreamField(
                        [
                            (
                                "regret_story",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "headline",
                                            wagtail.blocks.CharBlock(help_text="Headline of this YouTube Regret"),
                                        ),
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(required=False),
                                        ),
                                        (
                                            "imageAltText",
                                            wagtail.blocks.CharBlock(
                                                help_text="Image description (for screen readers).",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "story",
                                            wagtail.blocks.TextBlock(
                                                help_text="Story of this YouTube Regret",
                                                verbose_name="youtube_regret_story",
                                            ),
                                        ),
                                    ]
                                ),
                            )
                        ]
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                        verbose_name="Search image",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                wagtailmetadata.models.WagtailImageMetadataMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="YoutubeRegrets2021Page",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                        verbose_name="Search image",
                    ),
                ),
            ],
            options={
                "verbose_name": "YouTube Regrets 2021 Page",
                "verbose_name_plural": "YouTube Regrets 2021 Pages",
            },
            bases=(
                wagtailmetadata.models.WagtailImageMetadataMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="Update",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "source",
                    models.URLField(help_text="Link to source", max_length=2048),
                ),
                ("title", models.CharField(max_length=256)),
                ("author", models.CharField(blank=True, max_length=256)),
                (
                    "featured",
                    models.BooleanField(
                        default=False,
                        help_text="feature this update at the top of the list?",
                    ),
                ),
                ("snippet", models.TextField(blank=True, max_length=5000)),
                (
                    "created_date",
                    models.DateField(auto_now_add=True, help_text="The date this product was created"),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
            ],
            options={
                "verbose_name": "Buyers Guide Product Update",
                "verbose_name_plural": "Buyers Guide Product Updates",
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name="RelatedBlogPosts",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="related_posts",
                        to="wagtailpages.blogpage",
                    ),
                ),
                (
                    "related_post",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="wagtailpages.blogpage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Related blog posts",
                "verbose_name_plural": "Related blog posts",
                "ordering": ["sort_order"],
            },
        ),
        migrations.CreateModel(
            name="PulseFilterOption",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "filter_value",
                    models.CharField(
                        help_text='The exact value to filter by in the directory; e.g. "staff", "mozfest ambassador", "mozfest wrangler" for profile types.',
                        max_length=255,
                    ),
                ),
                (
                    "filter_label",
                    models.CharField(
                        help_text='The label to display on the tabs; e.g. "Facilitators", "Ambassadors", "Wranglers" for profile types.',
                        max_length=255,
                    ),
                ),
                (
                    "enable_subfiltering",
                    models.BooleanField(
                        blank=True,
                        default=True,
                        help_text="Display additional filtering options if available.",
                    ),
                ),
                (
                    "pulse_filter",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="options",
                        to="wagtailpages.pulsefilter",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PublicationPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("subtitle", models.CharField(blank=True, max_length=250)),
                ("secondary_subtitle", models.CharField(blank=True, max_length=250)),
                (
                    "publication_date",
                    models.DateField(blank=True, null=True, verbose_name="Publication date"),
                ),
                (
                    "additional_author_copy",
                    models.CharField(
                        blank=True,
                        help_text="Example: with contributing authors",
                        max_length=100,
                    ),
                ),
                ("intro_notes", wagtail.fields.RichTextField(blank=True)),
                ("notes", wagtail.fields.RichTextField(blank=True)),
                (
                    "contents_title",
                    models.CharField(blank=True, default="Table of Contents", max_length=250),
                ),
                (
                    "hero_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="publication_hero_image",
                        to="wagtailimages.image",
                        verbose_name="Publication Hero Image",
                    ),
                ),
                (
                    "publication_file",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtaildocs.document",
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                        verbose_name="Search image",
                    ),
                ),
                (
                    "toc_thumbnail_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Thumbnail image to show on table of content. Use square image of 320×320 pixels or larger.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="toc_thumbnail_image",
                        to="wagtailimages.image",
                        verbose_name="Table of Content Thumbnail",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                wagtailmetadata.models.WagtailImageMetadataMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="PublicationAuthors",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "author",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="wagtailpages.contentauthor",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="authors",
                        to="wagtailpages.publicationpage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="productpage",
            name="votes",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="votes",
                to="wagtailpages.productpagevotes",
            ),
        ),
        migrations.CreateModel(
            name="FeatureFlags",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "activate_donate_banner",
                    models.BooleanField(
                        default=False,
                        help_text="This will show our donation banner at the top of all foundation pages, when checked",
                        verbose_name="Activate the donation banner",
                    ),
                ),
                (
                    "site",
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.site",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DearInternetPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "intro_texts",
                    wagtail.fields.StreamField(
                        [
                            (
                                "intro_text",
                                wagtail.blocks.RichTextBlock(features=["bold", "italic", "link"]),
                            )
                        ]
                    ),
                ),
                (
                    "letters_section_heading",
                    models.CharField(default="Stories from around the world", max_length=300),
                ),
                (
                    "letters",
                    wagtail.fields.StreamField(
                        [
                            (
                                "letter",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "author_name",
                                            wagtail.blocks.CharBlock(),
                                        ),
                                        (
                                            "author_description",
                                            wagtail.blocks.RichTextBlock(features=["bold", "italic", "link"]),
                                        ),
                                        (
                                            "author_photo",
                                            wagtail.images.blocks.ImageChooserBlock(required=False),
                                        ),
                                        (
                                            "letter",
                                            wagtail.blocks.RichTextBlock(
                                                features=["bold", "link", "ol", "ul"],
                                                help_text="Main letter content",
                                            ),
                                        ),
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(required=False),
                                        ),
                                        (
                                            "video_url",
                                            wagtail.blocks.URLBlock(
                                                help_text="Video url to link out to. Note that video embed will show only when the url is a valid YouTube video embed url. Go to your YouTube video and click “Share,” then “Embed,” and then copy and paste the provided URL only. For example: https://www.youtube.com/embed/s7OD5BgFrVM",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            )
                        ]
                    ),
                ),
                ("cta", models.CharField(max_length=500)),
                ("cta_button_text", models.CharField(max_length=100)),
                ("cta_button_link", models.URLField()),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                        verbose_name="Search image",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                wagtailmetadata.models.WagtailImageMetadataMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="BlogPageTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="wagtailpages.blogpage",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="wagtailpages_blogpagetag_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BlogPageCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                ("name", models.CharField(max_length=50)),
                (
                    "title",
                    models.TextField(
                        blank=True,
                        help_text='Optional title that will apear on the page and when category page is shared. If not set, will default to "name" text.',
                    ),
                ),
                ("intro", wagtail.fields.RichTextField(blank=True)),
                (
                    "share_description",
                    models.TextField(
                        blank=True,
                        help_text='Optional description that will apear when category page is shared. If not set, will default to "intro" text.',
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
                (
                    "share_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Optional image that will apear when category page is shared.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="wagtailimages.image",
                        verbose_name="Share Image",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Page Category",
                "verbose_name_plural": "Blog Page Categories",
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.AddField(
            model_name="blogpage",
            name="category",
            field=modelcluster.fields.ParentalManyToManyField(
                blank=True,
                help_text="Which blog categories is this blog page associated with?",
                to="wagtailpages.BlogPageCategory",
                verbose_name="Categories",
            ),
        ),
        migrations.AddField(
            model_name="blogpage",
            name="hero_image",
            field=models.ForeignKey(
                blank=True,
                help_text="Image for the blog page hero section.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="hero_banner_image",
                to="wagtailimages.image",
                verbose_name="Hero Image",
            ),
        ),
        migrations.AddField(
            model_name="blogpage",
            name="search_image",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="wagtailimages.image",
                verbose_name="Search image",
            ),
        ),
        migrations.AddField(
            model_name="blogpage",
            name="tags",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="wagtailpages.BlogPageTag",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.CreateModel(
            name="BlogAuthors",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailpages.contentauthor",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="authors",
                        to="wagtailpages.blogpage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ArticlePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            (
                                "airtable",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "url",
                                            wagtail.blocks.URLBlock(
                                                help_text="Copied from the Airtable embed code. The word 'embed' will be in the url"
                                            ),
                                        ),
                                        (
                                            "height",
                                            wagtail.blocks.IntegerBlock(
                                                default=533,
                                                help_text="The pixel height on desktop view, usually copied from the Airtable embed code",
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "datawrapper",
                                wagtail.embeds.blocks.EmbedBlock(
                                    help_text='Enter the "visualization only" link of the Datawrapper chart. It looks something like this: https://datawrapper.dwcdn.net/KwSKp/1/',
                                    icon="image",
                                    template="wagtailpages/blocks/datawrapper_block.html",
                                ),
                            ),
                            (
                                "callout",
                                wagtail.blocks.RichTextBlock(
                                    features=["bold"],
                                    template="wagtailpages/blocks/article_blockquote_block.html",
                                ),
                            ),
                            (
                                "card_grid",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "cards",
                                            wagtail.blocks.ListBlock(
                                                wagtail.blocks.StructBlock(
                                                    [
                                                        (
                                                            "image",
                                                            wagtail.images.blocks.ImageChooserBlock(),
                                                        ),
                                                        (
                                                            "alt_text",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Alt text for card's image.",
                                                                required=False,
                                                            ),
                                                        ),
                                                        (
                                                            "title",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Heading for the card."
                                                            ),
                                                        ),
                                                        (
                                                            "body",
                                                            wagtail.blocks.TextBlock(
                                                                help_text="Body text of the card."
                                                            ),
                                                        ),
                                                        (
                                                            "link_url",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Optional URL that this card should link out to. (Note: If left blank, link will not render.) ",
                                                                required=False,
                                                            ),
                                                        ),
                                                        (
                                                            "link_label",
                                                            wagtail.blocks.CharBlock(
                                                                help_text="Optional Label for the URL link above. (Note: If left blank, link will not render.) ",
                                                                required=False,
                                                            ),
                                                        ),
                                                    ]
                                                ),
                                                help_text="Please use a minimum of 2 cards.",
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "content",
                                networkapi.wagtailpages.pagemodels.customblocks.articles.ArticleRichText(
                                    features=[
                                        "bold",
                                        "italic",
                                        "link",
                                        "h2",
                                        "h3",
                                        "h4",
                                        "h5",
                                        "ol",
                                        "ul",
                                        "hr",
                                        "large",
                                        "image",
                                        "footnotes",
                                    ]
                                ),
                            ),
                            (
                                "image",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.RichTextBlock(
                                                features=["bold", "italic", "link"],
                                                label="Image caption",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "alt_text",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "wide_image",
                                            wagtail.blocks.BooleanBlock(
                                                default=False,
                                                help_text='Checking this will use a wider version of this image, but not full width. For an edge-to-edge image, use the "Wide Image" block.',
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "double_image",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image_1",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "image_1_caption",
                                            wagtail.blocks.RichTextBlock(
                                                features=["bold", "italic", "link"],
                                                label="Image caption",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "image_2",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "image_2_caption",
                                            wagtail.blocks.RichTextBlock(
                                                features=["bold", "italic", "link"],
                                                label="Image caption",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "full_width_image",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "image_height",
                                            wagtail.blocks.IntegerBlock(
                                                default=410,
                                                help_text="A custom height for this image. The image will be 1400px wide by this height. Note: This may cause images to look pixelated. If the browser is wider than 1400px the height will scale vertically while the width scales horizontally",
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.RichTextBlock(
                                                features=["bold", "italic", "link"],
                                                label="Image caption",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "iframe",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "url",
                                            wagtail.blocks.CharBlock(
                                                help_text="Please note that only URLs from allow-listed domains will work."
                                            ),
                                        ),
                                        (
                                            "height",
                                            wagtail.blocks.IntegerBlock(
                                                help_text="Optional integer pixel value for custom iFrame height",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "captionURL",
                                            wagtail.blocks.CharBlock(
                                                help_text="Optional URL that this caption should link out to.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "iframe_width",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("normal", "Normal"),
                                                    ("wide", "Wide"),
                                                    ("full_width", "Full Width"),
                                                ],
                                                help_text="Wide iframes are col-12, Full-Width iframes reach both ends of the screen",
                                            ),
                                        ),
                                        (
                                            "disable_scroll",
                                            wagtail.blocks.BooleanBlock(
                                                default=False,
                                                help_text='Checking this will add "scrolling=no" to the iframe. Use this if your iframe is rendering an unnecessary scroll bar or whitespace below it.',
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "linkbutton",
                                wagtail.blocks.StructBlock(
                                    [
                                        ("label", wagtail.blocks.CharBlock()),
                                        ("URL", wagtail.blocks.CharBlock()),
                                        (
                                            "styling",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("btn-primary", "Primary button"),
                                                    (
                                                        "btn-secondary",
                                                        "Secondary button",
                                                    ),
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "single_quote",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "quote",
                                            wagtail.blocks.RichTextBlock(features=["bold"]),
                                        ),
                                        (
                                            "attribution",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "attribution_info",
                                            wagtail.blocks.RichTextBlock(
                                                features=["bold", "link", "large"],
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "table",
                                wagtail.contrib.table_block.blocks.TableBlock(
                                    template="wagtailpages/blocks/article_table_block.html"
                                ),
                            ),
                            (
                                "video",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "url",
                                            wagtail.blocks.CharBlock(
                                                help_text="For YouTube: go to your YouTube video and click “Share,” then “Embed,” and then copy and paste the provided URL only. For example: https://www.youtube.com/embed/3FIVXBawyQw For Vimeo: follow similar steps to grab the embed URL. For example: https://player.vimeo.com/video/9004979"
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "captionURL",
                                            wagtail.blocks.CharBlock(
                                                help_text="Optional URL for caption to link to.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "video_width",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("normal", "Normal"),
                                                    ("wide", "Wide"),
                                                    ("full_width", "Full Width"),
                                                ],
                                                help_text="Wide videos are col-12, Full-Width videos reach both ends of the screen.",
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "advanced_table",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "header",
                                            wagtail.blocks.BooleanBlock(
                                                help_text="Display the first row as a header.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "column",
                                            wagtail.blocks.BooleanBlock(
                                                help_text="Display the first column as a header.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.CharBlock(
                                                help_text="A heading that identifies the overall topic of the table, and is useful for screen reader users",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "table",
                                            wagtail.blocks.StreamBlock(
                                                [
                                                    (
                                                        "row",
                                                        wagtail.blocks.StreamBlock(
                                                            [
                                                                (
                                                                    "cell",
                                                                    wagtail.blocks.StructBlock(
                                                                        [
                                                                            (
                                                                                "centered_text",
                                                                                wagtail.blocks.BooleanBlock(
                                                                                    required=False
                                                                                ),
                                                                            ),
                                                                            (
                                                                                "column_width",
                                                                                wagtail.blocks.IntegerBlock(
                                                                                    default=1,
                                                                                    help_text="Enter the number of extra cell columns you want to merge together. Merging a cell column will expand a cell to the right. To merge two cells together, set the column width to 2. For 3, set 3. Default is 1. Min 1. Max 20.",
                                                                                    validators=[
                                                                                        django.core.validators.MaxValueValidator(
                                                                                            20
                                                                                        ),
                                                                                        django.core.validators.MinValueValidator(
                                                                                            1
                                                                                        ),
                                                                                    ],
                                                                                ),
                                                                            ),
                                                                            (
                                                                                "content",
                                                                                wagtail.blocks.RichTextBlock(
                                                                                    features=[
                                                                                        "bold",
                                                                                        "italic",
                                                                                        "link",
                                                                                        "ul",
                                                                                        "ol",
                                                                                    ]
                                                                                ),
                                                                            ),
                                                                        ]
                                                                    ),
                                                                )
                                                            ]
                                                        ),
                                                    )
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                        ]
                    ),
                ),
                ("subtitle", models.CharField(blank=True, max_length=250)),
                ("secondary_subtitle", models.CharField(blank=True, max_length=250)),
                (
                    "publication_date",
                    models.DateField(blank=True, null=True, verbose_name="Publication date"),
                ),
                (
                    "show_side_share_buttons",
                    models.BooleanField(default=True, help_text="Show social share buttons on the side"),
                ),
                (
                    "article_file",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtaildocs.document",
                    ),
                ),
                (
                    "hero_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                        verbose_name="Publication Hero Image",
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                        verbose_name="Search image",
                    ),
                ),
                (
                    "toc_thumbnail_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Thumbnail image to show on table of content. Use square image of 320×320 pixels or larger.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                        verbose_name="Table of Content Thumbnail",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                wagtailmetadata.models.WagtailImageMetadataMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="ArticleAuthors",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "author",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="wagtailpages.contentauthor",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="authors",
                        to="wagtailpages.articlepage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CampaignPage",
            fields=[
                (
                    "minisitenamespace_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailpages.minisitenamespace",
                    ),
                ),
                (
                    "cta",
                    models.ForeignKey(
                        blank=True,
                        help_text="Choose one of our call-to-action snippets, or create a new one.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="campaign_page_for_cta",
                        to="wagtailpages.cta",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailpages.minisitenamespace",),
        ),
        migrations.CreateModel(
            name="OpportunityPage",
            fields=[
                (
                    "minisitenamespace_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailpages.minisitenamespace",
                    ),
                ),
            ],
            options={
                "verbose_name": "Default Page",
                "verbose_name_plural": "Default pages",
            },
            bases=("wagtailpages.minisitenamespace",),
        ),
        migrations.CreateModel(
            name="Signup",
            fields=[
                (
                    "cta_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailpages.cta",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "campaign_id",
                    models.CharField(
                        blank=True,
                        help_text="Which campaign identifier should this petition be tied to?",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "ask_name",
                    models.BooleanField(
                        default=False,
                        help_text="Check this box to show (optional) name fields",
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
            ],
            options={
                "verbose_name": "signup snippet",
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
            bases=("wagtailpages.cta", models.Model),
        ),
        migrations.CreateModel(
            name="RelatedProducts",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="related_product_pages",
                        to="wagtailpages.productpage",
                    ),
                ),
                (
                    "related_product",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailpages.productpage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Related Product",
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="ProductUpdates",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="updates",
                        to="wagtailpages.productpage",
                    ),
                ),
                (
                    "update",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailpages.update",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Update",
                "ordering": ["sort_order"],
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="ProductPagePrivacyPolicyLink",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Label for this link on the product page",
                        max_length=500,
                    ),
                ),
                (
                    "url",
                    models.URLField(blank=True, help_text="Privacy policy URL", max_length=2048),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="privacy_policy_links",
                        to="wagtailpages.productpage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Privacy Link",
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="ProductPageCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "category",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailpages.buyersguideproductcategory",
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
                (
                    "product",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product_categories",
                        to="wagtailpages.productpage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Category",
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="PartnerLogos",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("link", models.URLField(blank=True)),
                (
                    "name",
                    models.CharField(
                        default="Partner Name",
                        help_text="Alt text for the logo image.",
                        max_length=100,
                    ),
                ),
                (
                    "width",
                    models.PositiveSmallIntegerField(
                        default=100,
                        help_text="The width of the image. Height will automatically be applied.",
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
                (
                    "logo",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="partner_logos",
                        to="wagtailpages.homepage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Partner Logo",
                "ordering": ["sort_order"],
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="ParticipatePage2",
            fields=[
                (
                    "primarypage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailpages.primarypage",
                    ),
                ),
                ("ctaHeroHeader", models.TextField(blank=True)),
                ("ctaHeroSubhead", wagtail.fields.RichTextField(blank=True)),
                (
                    "ctaButtonTitle",
                    models.CharField(blank=True, max_length=250, verbose_name="Button Text"),
                ),
                (
                    "ctaButtonURL",
                    models.TextField(blank=True, verbose_name="Button URL"),
                ),
                ("ctaHeroHeader2", models.TextField(blank=True)),
                ("ctaHeroSubhead2", wagtail.fields.RichTextField(blank=True)),
                (
                    "ctaButtonTitle2",
                    models.CharField(blank=True, max_length=250, verbose_name="Button Text"),
                ),
                (
                    "ctaButtonURL2",
                    models.TextField(blank=True, verbose_name="Button URL"),
                ),
                ("ctaHeroHeader3", models.TextField(blank=True)),
                ("ctaHeroSubhead3", wagtail.fields.RichTextField(blank=True)),
                ("ctaFacebook3", models.TextField(blank=True)),
                ("ctaTwitter3", models.TextField(blank=True)),
                ("ctaEmailShareBody3", models.TextField(blank=True)),
                ("ctaEmailShareSubject3", models.TextField(blank=True)),
                ("h2", models.TextField(blank=True)),
                (
                    "h2Subheader",
                    models.TextField(blank=True, verbose_name="H2 Subheader"),
                ),
                (
                    "ctaHero",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="primary_hero_participate",
                        to="wagtailimages.image",
                        verbose_name="Primary Hero Image",
                    ),
                ),
                (
                    "ctaHero2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="primary_hero_participate2",
                        to="wagtailimages.image",
                        verbose_name="Primary Hero Image",
                    ),
                ),
                (
                    "ctaHero3",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="primary_hero_participate3",
                        to="wagtailimages.image",
                        verbose_name="Primary Hero Image",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailpages.primarypage",),
        ),
        migrations.CreateModel(
            name="InitiativesPage",
            fields=[
                (
                    "primarypage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailpages.primarypage",
                    ),
                ),
                ("subheader", models.TextField(blank=True)),
                ("h3", models.TextField(blank=True)),
                ("sub_h3", models.TextField(blank=True)),
                (
                    "primaryHero",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="primary_hero",
                        to="wagtailimages.image",
                        verbose_name="Primary Hero Image",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailpages.primarypage",),
        ),
        migrations.CreateModel(
            name="HomepageTakeActionCards",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("text", models.CharField(max_length=255)),
                (
                    "image",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "internal_link",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="take_action_cards",
                        to="wagtailpages.homepage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Take Action Card",
                "ordering": ["sort_order"],
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="HomepageSpotlightPosts",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "blog",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailpages.blogpage",
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="spotlight_posts",
                        to="wagtailpages.homepage",
                    ),
                ),
            ],
            options={
                "verbose_name": "blog",
                "verbose_name_plural": "blogs",
                "ordering": ["sort_order"],
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="HomepageNewsYouCanUse",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "blog",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailpages.blogpage",
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="news_you_can_use",
                        to="wagtailpages.homepage",
                    ),
                ),
            ],
            options={
                "verbose_name": "blog",
                "verbose_name_plural": "blogs",
                "ordering": ["sort_order"],
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="HomepageFocusAreas",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailpages.focusarea",
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="focus_areas",
                        to="wagtailpages.homepage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Homepage Focus Area",
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="FeaturedBlogPages",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "blog",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailpages.blogpage",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="featured_pages",
                        to="wagtailpages.blogindexpage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
            },
        ),
        migrations.CreateModel(
            name="ExcludedCategories",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailpages.buyersguideproductcategory",
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="excluded_categories",
                        to="wagtailpages.buyersguidepage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Excluded Category",
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="BanneredCampaignTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="wagtailpages_banneredcampaigntag_items",
                        to="taggit.tag",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="wagtailpages.banneredcampaignpage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="banneredcampaignpage",
            name="signup",
            field=models.ForeignKey(
                blank=True,
                help_text="Choose an existing, or create a new, sign-up form",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="bcpage",
                to="wagtailpages.signup",
            ),
        ),
        migrations.AddField(
            model_name="banneredcampaignpage",
            name="tags",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="wagtailpages.BanneredCampaignTag",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.CreateModel(
            name="Petition",
            fields=[
                (
                    "cta_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailpages.cta",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "campaign_id",
                    models.CharField(
                        blank=True,
                        help_text="Which campaign identifier should this petition be tied to?",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "requires_country_code",
                    models.BooleanField(
                        default=False,
                        help_text="Will this petition require users to specify their country?",
                    ),
                ),
                (
                    "requires_postal_code",
                    models.BooleanField(
                        default=False,
                        help_text="Will this petition require users to specify their postal code?",
                    ),
                ),
                (
                    "comment_requirements",
                    models.CharField(
                        choices=[
                            ("none", "No comments"),
                            ("optional", "Optional comments"),
                            ("required", "Required comments"),
                        ],
                        default="none",
                        help_text="What is the comments policy for this petition?",
                        max_length=8,
                    ),
                ),
                (
                    "checkbox_1",
                    models.CharField(
                        blank=True,
                        editable=False,
                        help_text="label for the first checkbox option (may contain HTML)",
                        max_length=1024,
                    ),
                ),
                (
                    "checkbox_2",
                    models.CharField(
                        blank=True,
                        editable=False,
                        help_text="label for the second checkbox option (may contain HTML)",
                        max_length=1024,
                    ),
                ),
                (
                    "share_link",
                    models.URLField(
                        blank=True,
                        editable=False,
                        help_text="Link that will be put in share button",
                        max_length=1024,
                    ),
                ),
                (
                    "share_link_text",
                    models.CharField(
                        blank=True,
                        default="Share this",
                        editable=False,
                        help_text="Text content of the share button",
                        max_length=20,
                    ),
                ),
                (
                    "share_twitter",
                    models.CharField(
                        blank=True,
                        help_text="Share Progress id for twitter button, including the sp_... prefix",
                        max_length=20,
                    ),
                ),
                (
                    "share_facebook",
                    models.CharField(
                        blank=True,
                        help_text="Share Progress id for facebook button, including the sp_... prefix",
                        max_length=20,
                    ),
                ),
                (
                    "share_email",
                    models.CharField(
                        blank=True,
                        help_text="Share Progress id for email button, including the sp_... prefix",
                        max_length=20,
                    ),
                ),
                (
                    "thank_you",
                    models.CharField(
                        default="Thank you for signing too!",
                        help_text="Message to show after thanking people for signing",
                        max_length=140,
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
            ],
            options={
                "verbose_name": "petition snippet",
                "ordering": ["-id"],
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
            bases=("wagtailpages.cta", models.Model),
        ),
        migrations.CreateModel(
            name="ParticipateHighlights2",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "highlight",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="highlights.highlight",
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="featured_highlights2",
                        to="wagtailpages.participatepage2",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="ParticipateHighlights",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "highlight",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="highlights.highlight",
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="featured_highlights",
                        to="wagtailpages.participatepage2",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="InitiativesHighlights",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "highlight",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="highlights.highlight",
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="featured_highlights",
                        to="wagtailpages.initiativespage",
                    ),
                ),
            ],
            options={
                "verbose_name": "highlight",
                "verbose_name_plural": "highlights",
                "ordering": ["sort_order"],
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="InitiativeSection",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "sectionHeader",
                    models.CharField(max_length=250, verbose_name="Header"),
                ),
                ("sectionCopy", models.TextField(verbose_name="Subheader")),
                (
                    "sectionButtonTitle",
                    models.CharField(max_length=250, verbose_name="Button Text"),
                ),
                ("sectionButtonURL", models.TextField(verbose_name="Button URL")),
                (
                    "sectionButtonTitle2",
                    models.CharField(blank="True", max_length=250, verbose_name="Button 2 Text"),
                ),
                (
                    "sectionButtonURL2",
                    models.TextField(blank="True", verbose_name="Button 2 URL"),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
                (
                    "sectionImage",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="section_image",
                        to="wagtailimages.image",
                        verbose_name="Hero Image",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="initiative_sections",
                        to="wagtailpages.initiativespage",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="CTA4",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("header", models.TextField(blank=True)),
                ("subhead", wagtail.fields.RichTextField(blank=True)),
                (
                    "buttonTitle",
                    models.CharField(blank=True, max_length=250, verbose_name="Button Text"),
                ),
                ("buttonURL", models.TextField(blank=True, verbose_name="Button URL")),
                (
                    "hero",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="cta_hero",
                        to="wagtailimages.image",
                        verbose_name="Hero Image",
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cta4",
                        to="wagtailpages.participatepage2",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
        migrations.CreateModel(
            name="Callpower",
            fields=[
                (
                    "cta_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailpages.cta",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "campaign_id",
                    models.CharField(
                        help_text="Which Callpower campaign identifier should this CTA be tied to?",
                        max_length=20,
                    ),
                ),
                (
                    "call_button_label",
                    models.CharField(
                        default="Make the call",
                        help_text='The call button label (defaults to "Make the call")',
                        max_length=20,
                    ),
                ),
                (
                    "success_heading",
                    models.CharField(
                        default="Thank you for calling",
                        help_text='The heading users will see after clicking the call button (defaults to "Thank you for calling")',
                        max_length=50,
                    ),
                ),
                (
                    "success_text",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="The text users will see after clicking the call button",
                    ),
                ),
                (
                    "share_twitter",
                    models.CharField(
                        blank=True,
                        help_text="Share Progress id for twitter button, including the sp_... prefix",
                        max_length=20,
                    ),
                ),
                (
                    "share_facebook",
                    models.CharField(
                        blank=True,
                        help_text="Share Progress id for facebook button, including the sp_... prefix",
                        max_length=20,
                    ),
                ),
                (
                    "share_email",
                    models.CharField(
                        blank=True,
                        help_text="Share Progress id for email button, including the sp_... prefix",
                        max_length=20,
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
            ],
            options={
                "verbose_name": "callpower snippet",
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
            bases=("wagtailpages.cta", models.Model),
        ),
        migrations.CreateModel(
            name="DonationModals",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "donation_modal",
                    models.ForeignKey(
                        blank=True,
                        help_text="Choose existing or create new donation modal",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="campaign",
                        to="wagtailpages.donationmodal",
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="donation_modals",
                        to="wagtailpages.campaignpage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Donation Modals",
                "verbose_name_plural": "Donation Modals",
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
        ),
    ]
