# Generated by Django 2.2.16 on 2020-10-05 23:17

from django.db import migrations, models
import networkapi.buyersguide.fields

PRODUCT_CACHE = {
    'general': [],
}

def cache_products(apps, schema_editor):
    """
    Since we're moving fields from base class to the general class,
    we need to cache all general products based on what they're set
    to in the DB prior to messing with the fields, so that we can then
    remove the fields from the base class, add them to the general
    class, and then restore them to their original values.
    """
    GeneralProduct = apps.get_model("buyersguide", "GeneralProduct")
    PRODUCT_CACHE['general'] = list(GeneralProduct.objects.all())


def restore_products(apps, schema_editor):
    GeneralProduct = apps.get_model("buyersguide", "GeneralProduct")

    for product in PRODUCT_CACHE['general']:
        updated = GeneralProduct.objects.get(id=product.id)

        # restore every field we moved from base class to general class
        updated.ai_helptext = product.ai_helptext
        updated.ai_is_transparent = product.ai_is_transparent
        updated.ai_uses_personal_data = product.ai_uses_personal_data
        updated.biometric_data_collected = product.biometric_data_collected
        updated.company_track_record = product.company_track_record
        updated.data_control_policy_is_bad = product.data_control_policy_is_bad
        updated.how_can_you_control_your_data = product.how_can_you_control_your_data
        updated.offline_capable = product.offline_capable
        updated.offline_use_description = product.offline_use_description
        updated.personal_data_collected = product.personal_data_collected
        updated.social_data_collected = product.social_data_collected
        updated.track_record_details = product.track_record_details
        updated.track_record_is_bad = product.track_record_is_bad
        updated.uses_ai = product.uses_ai

        # make sure we save these updates!
        updated.save()


class Migration(migrations.Migration):

    dependencies = [
        ('buyersguide', '0002_auto_20200923_1817'),
    ]

    operations = [
        # cache all fields so that we won't lose their values in the destructive relocation
        migrations.RunPython(cache_products),

        # first, remove a dead field that should have been removed already.
        # We don't care about this field, get out of here, you.
        migrations.RemoveField(
            model_name='generalproduct',
            name='child_rules_helptext',
        ),

        # Then, remove the fields from their incorrect classes
        migrations.RemoveField(
            model_name='product',
            name='ai_helptext',
        ),
        migrations.RemoveField(
            model_name='product',
            name='ai_is_transparent',
        ),
        migrations.RemoveField(
            model_name='product',
            name='ai_uses_personal_data',
        ),
        migrations.RemoveField(
            model_name='product',
            name='biometric_data_collected',
        ),
        migrations.RemoveField(
            model_name='product',
            name='company_track_record',
        ),
        migrations.RemoveField(
            model_name='product',
            name='data_control_policy_is_bad',
        ),
        migrations.RemoveField(
            model_name='product',
            name='how_can_you_control_your_data',
        ),
        migrations.RemoveField(
            model_name='product',
            name='offline_capable',
        ),
        migrations.RemoveField(
            model_name='product',
            name='offline_use_description',
        ),
        migrations.RemoveField(
            model_name='product',
            name='personal_data_collected',
        ),
        migrations.RemoveField(
            model_name='product',
            name='social_data_collected',
        ),
        migrations.RemoveField(
            model_name='product',
            name='track_record_details',
        ),
        migrations.RemoveField(
            model_name='product',
            name='track_record_is_bad',
        ),
        migrations.RemoveField(
            model_name='product',
            name='uses_ai',
        ),

        # Then add the fields to their correct classes
        migrations.AddField(
            model_name='generalproduct',
            name='ai_helptext',
            field=models.TextField(blank=True, help_text='Helpful text around AI to show on the product page', max_length=5000),
        ),
        migrations.AddField(
            model_name='generalproduct',
            name='ai_is_transparent',
            field=networkapi.buyersguide.fields.ExtendedYesNoField(help_text='Does the company allow users to see how the AI works?'),
        ),
        migrations.AddField(
            model_name='generalproduct',
            name='ai_uses_personal_data',
            field=networkapi.buyersguide.fields.ExtendedYesNoField(help_text='Does the AI use your personal data to make decisions about you?'),
        ),
        migrations.AddField(
            model_name='generalproduct',
            name='biometric_data_collected',
            field=models.TextField(blank=True, help_text='What kind of biometric data does this product collect?', max_length=5000),
        ),
        migrations.AddField(
            model_name='generalproduct',
            name='company_track_record',
            field=models.CharField(choices=[('Great', 'Great'), ('Average', 'Average'), ('Needs Improvement', 'Needs Improvement'), ('Bad', 'Bad')], default='Average', help_text='This company has a ... track record', max_length=20),
        ),
        migrations.AddField(
            model_name='generalproduct',
            name='data_control_policy_is_bad',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='generalproduct',
            name='how_can_you_control_your_data',
            field=models.TextField(blank=True, help_text='How does this product let you control your data?', max_length=5000),
        ),
        migrations.AddField(
            model_name='generalproduct',
            name='offline_capable',
            field=networkapi.buyersguide.fields.ExtendedYesNoField(help_text='Can this product be used offline?'),
        ),
        migrations.AddField(
            model_name='generalproduct',
            name='offline_use_description',
            field=models.TextField(blank=True, help_text='Describe how this product can be used offline.', max_length=5000),
        ),
        migrations.AddField(
            model_name='generalproduct',
            name='personal_data_collected',
            field=models.TextField(blank=True, help_text='What kind of personal data does this product collect?', max_length=5000),
        ),
        migrations.AddField(
            model_name='generalproduct',
            name='social_data_collected',
            field=models.TextField(blank=True, help_text='What kind of social data does this product collect?', max_length=5000),
        ),
        migrations.AddField(
            model_name='generalproduct',
            name='track_record_details',
            field=models.TextField(blank=True, help_text='Describe the track record of this company here.', max_length=5000),
        ),
        migrations.AddField(
            model_name='generalproduct',
            name='track_record_is_bad',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='generalproduct',
            name='uses_ai',
            field=networkapi.buyersguide.fields.ExtendedYesNoField(help_text='Does the product use AI?'),
        ),

        # then restore all the fields to the values they had before they got relocated
        migrations.RunPython(restore_products),
    ]
