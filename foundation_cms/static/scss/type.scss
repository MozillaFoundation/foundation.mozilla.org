@use "sass:map";

// ===================================
// Variables
// ===================================

$font-weights: (
  extralight: 200,
  light: 300,
  regular: 400,
  semibold: 600,
  bold: 700,
);

/* stylelint-disable-next-line scss/dollar-variable-colon-space-after --
   allow Prettier line break formatting for long font stack */
$body-text-styles: (
  small: (
    "xlarge": (
      "font-size": rem-calc(20),
      "line-height": 1.3,
      "font-weight": map.get($font-weights, regular),
    ),
    "large": (
      "font-size": rem-calc(18),
      "line-height": 1.3,
      "font-weight": map.get($font-weights, regular),
    ),
    "regular": (
      "font-size": rem-calc(16),
      "line-height": 1.4,
      "font-weight": map.get($font-weights, regular),
    ),
    "small": (
      "font-size": rem-calc(14),
      "line-height": 1.3,
      "font-weight": map.get($font-weights, regular),
    ),
    "xsmall": (
      "font-size": rem-calc(12),
      "line-height": 1.3,
      "font-weight": map.get($font-weights, regular),
    ),
  ),
  large: (
    "xlarge": (
      "font-size": rem-calc(20),
      "line-height": 1.3,
      "font-weight": map.get($font-weights, regular),
    ),
    "large": (
      "font-size": rem-calc(18),
      "line-height": 1.3,
      "font-weight": map.get($font-weights, regular),
    ),
    "regular": (
      "font-size": rem-calc(16),
      "line-height": 1.4,
      "font-weight": map.get($font-weights, regular),
    ),
    "small": (
      "font-size": rem-calc(14),
      "line-height": 1.3,
      "font-weight": map.get($font-weights, regular),
    ),
    "xsmall": (
      "font-size": rem-calc(12),
      "line-height": 1.3,
      "font-weight": map.get($font-weights, regular),
    ),
  ),
);
$quote-text-styles: (
  small: (
    "large": (
      "font-size": rem-calc(32),
      "line-height": 1,
      "font-weight": map.get($font-weights, regular),
    ),
    "regular": (
      "font-size": rem-calc(24),
      "line-height": 1,
      "font-weight": map.get($font-weights, light),
    ),
  ),
  large: (
    "large": (
      "font-size": rem-calc(52),
      "line-height": 1,
      "font-weight": map.get($font-weights, regular),
    ),
    "regular": (
      "font-size": rem-calc(40),
      "line-height": 1,
      "font-weight": map.get($font-weights, light),
    ),
  ),
);
$label-text-styles: (
  small: (
    "large": (
      "font-size": rem-calc(20),
      "line-height": 1.2,
      "font-weight": map.get($font-weights, light),
    ),
    "regular": (
      "font-size": rem-calc(14),
      "line-height": 1.2,
      "font-weight": map.get($font-weights, light),
    ),
  ),
  large: (
    "large": (
      "font-size": rem-calc(20),
      "line-height": 1.2,
      "font-weight": map.get($font-weights, light),
    ),
    "regular": (
      "font-size": rem-calc(14),
      "line-height": 1.2,
      "font-weight": map.get($font-weights, light),
    ),
  ),
);
$link-text-styles: (
  small: (
    "xlarge": (
      "font-size": rem-calc(20),
      "line-height": 1.1,
      "font-weight": map.get($font-weights, regular),
    ),
    "large": (
      "font-size": rem-calc(18),
      "line-height": 1.3,
      "font-weight": map.get($font-weights, regular),
    ),
    "regular": (
      "font-size": rem-calc(16),
      "line-height": 1.3,
      "font-weight": map.get($font-weights, regular),
    ),
    "xsmall": (
      "font-size": rem-calc(12),
      "line-height": 1.3,
      "font-weight": map.get($font-weights, regular),
    ),
  ),
  large: (
    "xlarge": (
      "font-size": rem-calc(20),
      "line-height": 1.1,
      "font-weight": map.get($font-weights, regular),
    ),
    "large": (
      "font-size": rem-calc(18),
      "line-height": 1.1,
      "font-weight": map.get($font-weights, regular),
    ),
    "regular": (
      "font-size": rem-calc(16),
      "line-height": 1.3,
      "font-weight": map.get($font-weights, regular),
    ),
    "xsmall": (
      "font-size": rem-calc(16),
      "line-height": 1.3,
      "font-weight": map.get($font-weights, regular),
    ),
  ),
);

// ===================================
// Functions
// ===================================

// Get complete ruleset for a specific breakpoint (defaults to "small")
// @param {Map} $map-name - The style map (e.g., $header-styles)
// @param {String} $key - The style key (e.g., "1", "regular")
// @param {String} $breakpoint - The breakpoint ("small" or "large"), defaults to "small"
// @return {Map} The complete style ruleset
// Example: $some-block-heading: get-text-styles($header-styles, "1", "small");
@function get-text-styles($map-name, $key, $breakpoint: "small") {
  @return map.get(map.get($map-name, $breakpoint), $key);
}

// Get a specific property value from a text style
// @param {Map} $map-name - The style map (e.g., $body-text-styles)
// @param {String} $key - The style key (e.g., "large", "regular")
// @param {String} $property - The CSS property to retrieve (e.g., "font-size")
// @param {String} $breakpoint - The breakpoint ("small" or "large"), defaults to "small"
// @return {*} The property value
// Example: $desktop-body-large-size: get-text-property($body-text-styles, "large", "font-size", "large");
@function get-text-property($map-name, $key, $property, $breakpoint: "small") {
  $styles: get-text-styles($map-name, $key, $breakpoint);
  @return map.get($styles, $property);
}

// ===================================
// Mixins
// ===================================

@mixin mofo-text-style($map-name, $key, $font-family: $body-font-family) {
  $small-styles: get-text-styles($map-name, $key, "small");

  font-family: $font-family;

  @each $property, $value in $small-styles {
    #{$property}: $value;
  }

  @include breakpoint(large) {
    $large-styles: get-text-styles($map-name, $key, "large");

    @each $property, $value in $large-styles {
      #{$property}: $value;
    }
  }
}

@mixin apply-text-style(
  $map-name,
  $key,
  $breakpoint: "small",
  $font-family: $body-font-family
) {
  // Check if breakpoint exists
  @if not map.has-key($map-name, $breakpoint) {
    @error "Breakpoint '#{$breakpoint}' not found. Available breakpoints: #{map.keys($map-name)}";
  }

  // Check if key exists for this breakpoint
  $breakpoint-styles: map.get($map-name, $breakpoint);
  @if not map.has-key($breakpoint-styles, $key) {
    @error "Key '#{$key}' not found at '#{$breakpoint}' breakpoint. Available keys: #{map.keys($breakpoint-styles)}";
  }

  // Get the styles
  $styles: get-text-styles($map-name, $key, $breakpoint);

  // Additional safety check
  @if not $styles {
    @warn "No styles found for #{$key} at #{$breakpoint} breakpoint";
  } @else {
    font-family: $font-family;
    @each $property, $value in $styles {
      #{$property}: $value;
    }
  }
}

// ===================================
// Heading
// ===================================

body.redesign {
  h1,
  .h1-style {
    @include mofo-text-style($header-styles, "h1", $header-font-family);
  }

  h2,
  .h2-style {
    @include mofo-text-style($header-styles, "h2", $header-font-family);
  }

  h3,
  .h3-style {
    @include mofo-text-style($header-styles, "h3", $header-font-family);
  }

  h4,
  .h4-style {
    @include mofo-text-style($header-styles, "h4", $header-font-family);
  }

  h5,
  .h5-style {
    @include mofo-text-style($header-styles, "h5", $header-font-family);
  }

  h6,
  .h6-style {
    @include mofo-text-style($header-styles, "h6", $header-font-family);
  }
}

// ===================================
// Lede Text
// ===================================

.lede-text {
  font-family: $body-font-family;
  font-size: rem-calc(20);
  line-height: 1.2;
  font-weight: map.get($font-weights, regular);

  @include breakpoint(large) {
    font-size: rem-calc(24);
    line-height: 1.2;
    font-weight: map.get($font-weights, regular);
  }

  @include breakpoint(large) {
    font-size: rem-calc(24);
    line-height: 1.2;
    font-weight: map.get($font-weights, regular);
  }
}

// ===================================
// Body Text
// ===================================

.body-text-xlarge {
  @include mofo-text-style($body-text-styles, "xlarge");
}

.body-text-large {
  @include mofo-text-style($body-text-styles, "large");
}

.body-text-regular {
  @include mofo-text-style($body-text-styles, "regular");
}

.body-text-small {
  @include mofo-text-style($body-text-styles, "small");
}

.body-text-xsmall {
  @include mofo-text-style($body-text-styles, "xsmall");
}

// ===================================
// Quote Text
// ===================================

.quote-text-large {
  font-style: italic;

  @include mofo-text-style($quote-text-styles, "large");
}

.quote-text-regular {
  font-style: italic;

  @include mofo-text-style($quote-text-styles, "regular");
}

// ===================================
// Label Text
// ===================================

.label-text-large {
  text-transform: uppercase;

  @include mofo-text-style($label-text-styles, "large");
}

.label-text-regular {
  text-transform: uppercase;

  @include mofo-text-style($label-text-styles, "regular");
}

// ===================================
// Link Text
// ===================================

.link-text-xlarge {
  @include mofo-text-style($link-text-styles, "xlarge", $header-font-family);
}

.link-text-large {
  @include mofo-text-style($link-text-styles, "large", $header-font-family);
}

.link-text-regular {
  @include mofo-text-style($link-text-styles, "regular", $header-font-family);
}
