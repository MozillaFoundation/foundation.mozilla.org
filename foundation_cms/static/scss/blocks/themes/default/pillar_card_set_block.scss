@use "sass:map";

@import "../../../colors";
@import "../../../buttons";

.pillar-card-set {
  $corner-radius: (
    small: 2rem,
    large: 2rem,
  );
  $cards: (
    1: (
      rotation: -2.5deg,
      background-color: color(blue, "200"),
      background-image: url("../_images/handdrawn/arrow-up.png"),
      background-position: right -1.5rem bottom,
      background-size: (
        small: (
          width: rem-calc(110),
          height: auto,
        ),
        large: (
          width: rem-calc(110),
          height: auto,
        ),
      ),
      border-top-left-radius: $corner-radius,
      border-top-right-radius: $corner-radius,
    ),
    2: (
      rotation: 4deg,
      background-color: color(green, "200"),
      background-image: url("../_images/handdrawn/stairs.png"),
      background-position: right -0.7rem bottom -1rem,
      background-size: (
        small: (
          width: rem-calc(110),
          height: auto,
        ),
        large: (
          width: rem-calc(110),
          height: auto,
        ),
      ),
      border-bottom-left-radius: $corner-radius,
    ),
    3: (
      rotation: -2.5deg,
      background-color: color(yellow, "200"),
      background-image: url("../_images/handdrawn/rays.png"),
      background-position: right bottom,
      background-size: (
        small: (
          width: rem-calc(96),
          height: auto,
        ),
        large: (
          width: rem-calc(96),
          height: auto,
        ),
      ),
      border-top-right-radius: $corner-radius,
    ),
  );
  $card-padding: (
    small: rem-calc(20),
    large: 2rem,
  );

  @mixin apply-border-radius($corner-name, $radius-value) {
    @if $radius-value {
      border-#{$corner-name}-radius: map.get($radius-value, small);
      @include breakpoint(large up) {
        border-#{$corner-name}-radius: map.get($radius-value, large);
      }
    }
  }

  @mixin card-style($index) {
    $style: map.get($cards, $index);

    background-color: map.get($style, background-color);
    transform: rotate(map.get($style, rotation));
    transition: transform 0.1s ease;

    @include apply-border-radius(
      top-left,
      map.get($style, border-top-left-radius)
    );
    @include apply-border-radius(
      top-right,
      map.get($style, border-top-right-radius)
    );
    @include apply-border-radius(
      bottom-left,
      map.get($style, border-bottom-left-radius)
    );
    @include apply-border-radius(
      bottom-right,
      map.get($style, border-bottom-right-radius)
    );

    &:hover {
      transform: rotate(0);
    }

    .pillar-card-set__card-illu-wrapper {
      $background-sizes: map.get($style, background-size);
      $bg-size-small: map.get($background-sizes, small);
      $bg-size-large: map.get($background-sizes, large);
      $background-position: map.get($style, background-position);

      width: rem-calc(100);
      height: rem-calc(100);
      background-repeat: no-repeat;
      background-image: map.get($style, background-image);
      background-size: map.get($bg-size-small, width)
        map.get($bg-size-small, height);
      background-position: $background-position;

      @include breakpoint(large up) {
        width: rem-calc(95);
        height: rem-calc(120);
        background-size: map.get($bg-size-large, width)
          map.get($bg-size-large, height);
      }
    }
  }

  padding: 2rem 0 3rem;

  @include breakpoint(large up) {
    padding: 3rem 0 5rem;
  }

  &__card-container {
    display: flex;
    flex-direction: column;
    gap: 2rem;

    @include breakpoint(large up) {
      flex-direction: row;
      gap: 0;
      padding-bottom: 3rem;
    }
  }

  &__card {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    padding: map.get($card-padding, small);
    box-shadow: 0 4px 10px rgba(map.get($mofo-colors, black), 0.1);

    @for $i from 1 through length($cards) {
      &:nth-child(#{$i}) {
        @include card-style($i);
      }
    }

    @include breakpoint(large up) {
      padding: map.get($card-padding, large);
    }

    &-headline {
      @include apply-text-style(
        $header-styles,
        "h4",
        "small",
        $header-font-family
      );

      margin-top: 0;
      margin-bottom: 0;

      @include breakpoint(large up) {
        @include apply-text-style(
          $header-styles,
          "h4",
          "large",
          $header-font-family
        );
      }
    }

    &-link {
      @include cta-link(map.get($cta-link-icon-sizes, large), "large");
    }

    &[data-href] {
      &:hover {
        .pillar-card-set__card-link {
          @include cta-link-hover-state;
        }
      }
    }
  }

  &__card-bottom-wrapper {
    display: flex;
    flex-direction: row;
    align-items: end;
    justify-content: space-between;
    gap: 0.5rem;

    .pillar-card-set__card-link-wrapper {
      margin-top: 5rem;

      @include breakpoint(large up) {
        margin-top: rem-calc(120);
      }
    }
  }
}
