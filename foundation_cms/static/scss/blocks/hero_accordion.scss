@use "sass:map";

.hero-accordion {
  // ===================================
  // Variables
  // ===================================

  $panel-transition: (
    duration: 0.5s,
    // timing-function: cubic-bezier(0.7, 0, 0.15, 1)
    timing-function: ease,
  );

  $panel-height: (
    small: 400px,
    medium: 400px,
    xlarge: 600px,
  );

  $panel-colors: (
    1: #f88539,
    2: #eeb500,
    3: #eed800,
  );

  $text-side-padding: (
    small: 1rem,
    medium: 0.875rem
  );

  $details-section-padding: (
    small: 1.5rem 2rem,
    medium: 2rem
  );

  $video-aspect-ratio: 16 / 9; // 16:9 aspect ratio

  $play-button-size: 4rem;
  $play-button-arrow: (
    width: 30px,
    height: 18px
  );

  --open-multiplier: 5; // How many “flex units” the open panel gets
  --total-panels: 3; // This is the fallback value. This will be inline-overriden in Dango template
  --closed-panel-width: 100% / 3; // fallback value. Will be overriden by JS
  --open-panel-width: 100% / 3; // fallback value. Will be overriden by JS

  // ===================================
  // Functions
  // ===================================

  // Calculates the horizontal offset for panel details animation
  // Used to position the details section off-screen before it slides in
  //
  // @param {Number} $height - The panel height at current breakpoint
  // @param {Number} $direction - Direction multiplier: 1 for right (even panels), -1 for left (odd panels)
  // @return {Calc} - CSS calc() expression for translateX offset
  @function calc-panel-offset($height, $direction: 1) {
    @return calc(#{$direction} * (var(--open-panel-width) - 2 * #{$height}));
  }

  @function calc-panel-width($height) {
    @return calc(var(--open-panel-width) - #{$height});
  }

  // ===================================
  // Mixins
  // ===================================

  @mixin text-details-position-even($size) {
    $height: map.get($panel-height, $size);
    transform: translateX(calc-panel-offset($height));
    width: calc-panel-width($height);
  }

  @mixin text-details-position-odd($size) {
    $height: map.get($panel-height, $size);
    transform: translateX(calc-panel-offset($height, -1));
    width: calc-panel-width($height);
  }

  @mixin active-details-visible {
    display: block;
    opacity: 1;
  }

  @mixin active-panel-width {
    width: 100%;

    @include breakpoint(medium up) {
      width: var(--open-panel-width);
    }
  }

  @mixin closed-panel-width {
    width: 100%;

    @include breakpoint(medium up) {
      width: var(--closed-panel-width);
    }
  }

  // ===================================
  // Accordion Base Styling
  // ===================================

  display: flex;
  flex-direction: column;
  width: 100%;
  overflow: hidden;
  margin: 3rem 0;

  @include breakpoint(medium up) {
    flex-direction: row;
    height: map.get($panel-height, medium);
  }

  @include breakpoint(xlarge up) {
    height: map.get($panel-height, xlarge);
  }

  &__panel {
    flex: none;
    display: flex;
    position: relative;
    background-color: #eee;
    color: #333;
    cursor: pointer;
    transition: width map.get($panel-transition, duration)
      map.get($panel-transition, timing-function);
    overflow: hidden;

    @include closed-panel-width;

    &.active {
      @include active-panel-width;
    }

    &:nth-child(3n + 1) {
      background-color: map.get($panel-colors, 1);
    }

    &:nth-child(3n + 2) {
      background-color: map.get($panel-colors, 2);
    }

    &:nth-child(3n + 3) {
      background-color: map.get($panel-colors, 3);
    }

    // ===================================
    // Video Panel
    // ===================================

    &--video_panel {
      flex-direction: column;
      position: relative;
      overflow: hidden;

      // ===================================
      // Video Panel - Active State Rules
      // ===================================

      &.active {
        :not(.hero-accordion__details) .hero-accordion__label {
          display: none;
        }

        .hero-accordion__details {
          display: block;
          width: 100%;
          background-color: map.get($panel-colors, 1);
          color: black;

          @include breakpoint(medium up) {
            position: absolute;
            bottom: 0;
            transform: translateY(0);
            transition: transform map.get($panel-transition, duration)
              map.get($panel-transition, timing-function);
          }

          &.hidden {
            @include breakpoint(medium up) {
              transform: translateY(100%);
            }
          }
        }
      }

      // ===================================
      // Video Panel - Child Elements
      // ===================================


      .hero-accordion__video-wrapper {
        display: flex;

        @include breakpoint(medium up) {
          flex-direction: column;
        }

        .hero-accordion__label {
          flex: 0 0 65%;

          @include breakpoint(medium up) {
            flex: initial;
            margin: map.get($text-side-padding, medium);
          }
        }
      }

      .hero-accordion__details {
        display: none;
      }
    }

    // ===================================
    // Image Text Panel
    // ===================================

    &--image_text_panel {
      display: flex;
      height: 100%;
      overflow: hidden;
      position: relative;

      .hero-accordion__details {
        display: none;
        padding: map.get($details-section-padding, small);
        transition:
          opacity map.get($panel-transition, duration)
            map.get($panel-transition, timing-function)
            calc(map.get($panel-transition, duration) * 1 / 3),
          transform map.get($panel-transition, duration)
            map.get($panel-transition, timing-function);

        @include breakpoint(medium up) {
          position: absolute;
          top: 0;
          overflow: hidden;
          opacity: 0;
          height: 100%;
          padding: map.get($details-section-padding, medium);
        }
      }

      &:nth-child(even) {
        justify-content: flex-end;

        .hero-accordion__details {
          @include breakpoint(medium up) {
            right: 0;
            width: calc(var(--open-panel-width) - map.get($panel-height, small));
            transform: translateX(
              calc(var(--open-panel-width) - 2 * map.get($panel-height, small))
            );
          }

          @each $size in medium, xlarge {
            @include breakpoint(#{$size} up) {
              @include text-details-position-even($size);
            }
          }

          &-inner {
            transition: transform map.get($panel-transition, duration)
              map.get($panel-transition, timing-function);

            @include breakpoint(medium up) {
              transform: translateX(-(map.get($panel-height, medium)));
            }

            @include breakpoint(xlarge up) {
              transform: translateX(-(map.get($panel-height, xlarge)));
            }
          }
        }
      }

      &:nth-child(odd) {
        justify-content: flex-start;

        .hero-accordion__details {
          @include breakpoint(medium up) {
            left: 0;
            right: auto;
            width: calc(var(--open-panel-width) - map.get($panel-height, small));
          }

          @each $size in medium, xlarge {
            @include breakpoint(#{$size} up) {
              @include text-details-position-odd($size);
            }
          }

          &-inner {
            @include breakpoint(medium up) {
              transform: translateX(map.get($panel-height, medium));
            }
            @include breakpoint(xlarge up) {
              transform: translateX(map.get($panel-height, xlarge));
            }
          }
        }
      }

      &:nth-child(even).active {
        .hero-accordion__details {
          @include active-details-visible;

          @include breakpoint(medium up) {
            transform: translateX(-(map.get($panel-height, medium)));
          }

          @include breakpoint(xlarge up) {
            transform: translateX(-(map.get($panel-height, xlarge)));
          }
        }
      }

      &:nth-child(odd).active {
        .hero-accordion__details {
          @include active-details-visible;

          @include breakpoint(medium up) {
            transform: translateX(0);
          }
        }
      }

      @at-root &.active .hero-accordion__details-inner {
        @include breakpoint(medium up) {
          padding-top: 0;
          padding-bottom: 0;
          transform: translateX(0);
        }
      }

      .hero-accordion__image-box {
        display: flex;
        align-items: center;
        z-index: 2;
        transition: width map.get($panel-transition, duration)
          map.get($panel-transition, timing-function);

        @include closed-panel-width;
        @include breakpoint(medium up) {
          flex-direction: column;
          align-items: stretch;
        }

        .hero-accordion__label {
          display: block;
          margin-bottom: 0;

          @include breakpoint(medium up) {
            margin: map.get($text-side-padding, medium);
          }
        }

        .hero-accordion__image {
          width: var(--closed-panel-width);
          height: var(--closed-panel-width);
          aspect-ratio: 1 / 1;
          overflow: hidden;
          background-repeat: no-repeat;
          background-size: var(--closed-panel-width) var(--closed-panel-width);
          transition:
            width map.get($panel-transition, duration)
              map.get($panel-transition, timing-function),
            height map.get($panel-transition, duration)
              map.get($panel-transition, timing-function),
            background-size map.get($panel-transition, duration)
              map.get($panel-transition, timing-function);
        }
      }

      &.active {
        flex-direction: column-reverse;

        @include breakpoint(medium up) {
          flex-direction: row;
        }

        .hero-accordion__image-box {
          @include active-panel-width;

          .hero-accordion__label {
            display: none;
          }

          .hero-accordion__image {
            width: 100%;
            height: 100%;
            background-size: contain;

            @include breakpoint(medium up) {
              width: var(--open-panel-width);
              height: map.get($panel-height, medium);
              background-size: map.get($panel-height, medium)
                map.get($panel-height, medium);
            }

            @include breakpoint(xlarge up) {
              height: map.get($panel-height, xlarge);
              background-size: map.get($panel-height, xlarge)
                map.get($panel-height, xlarge);
            }
          }
        }
      }

      &.transitioning-to-inactive {
        .hero-accordion__image-box {
          .hero-accordion__label {
            display: none; // Stay hidden during transition
          }
        }
      }

      &:not(.active):not(.transitioning-to-inactive) {
        .hero-accordion__image-box {
          .hero-accordion__label {
            display: block;
          }
        }
      }

      &:nth-child(even) .hero-accordion__image-box {
        flex-direction: row;
        justify-content: end;

        @include breakpoint(medium up) {
          flex-direction: column;
        }

        .hero-accordion__image {
          background-position: right bottom;
        }
      }

      &:nth-child(odd) .hero-accordion__image-box {
        flex-direction: row-reverse;
        justify-content: start;

        @include breakpoint(medium up) {
          flex-direction: column-reverse;
          justify-content: start;
        }

        .hero-accordion__image {
          background-position: right top;
        }
      }
    }
  }

  &__video-box {
    position: relative;
    width: 100%;
    aspect-ratio: $video-aspect-ratio;
    overflow: hidden;

    iframe {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border: none;
    }
  }

  &__video-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 1rem 1rem 0 0;
    overflow: hidden;
    transition: border-radius map.get($panel-transition, duration)
      map.get($panel-transition, timing-function);

    @at-root .hero-accordion__panel--video_panel.active & {
      border-radius: 6rem 6rem 0 0;
    }
  }

  &__video-thumbnail {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    filter: brightness(70%);
  }

  &__video-play-button {
    position: relative;
    width: $play-button-size;
    height: $play-button-size;
    background: transparent;
    border: none;
    pointer-events: none;

    &::before {
      content: "";
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      width: 0;
      height: 0;
      border-left: map.get($play-button-arrow, width) solid white;
      border-top: map.get($play-button-arrow, height) solid transparent;
      border-bottom: map.get($play-button-arrow, height) solid transparent;
    }

    @at-root .hero-accordion__panel--video_panel:not(.active) & {
      display: none;
    }
  }

  // ===================================
  // Text Elements
  // ===================================

  &__label {
    margin-top: 0;
  }

  &__label,
  &__heading,
  &__description,
  &__cta {
    padding: 0 map.get($text-side-padding, small);

    @include breakpoint(medium up) {
      padding: 0 map.get($text-side-padding, medium);
    }
  }
}
