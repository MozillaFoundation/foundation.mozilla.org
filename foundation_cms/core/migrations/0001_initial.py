# Generated by Django 4.2.20 on 2025-04-21 20:26

import django.db.models.deletion
import modelcluster.contrib.taggit
import wagtail.fields
import wagtailmetadata.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("wagtailcore", "0094_alter_page_locale"),
        ("base", "0002_pagetag_taggedpage"),
        ("wagtailimages", "0027_image_description"),
    ]

    operations = [
        migrations.CreateModel(
            name="HomePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("body", wagtail.fields.StreamField([], blank=True, block_lookup={})),
                ("hero_headline", models.CharField(blank=True, help_text="Hero story headline", max_length=120)),
                (
                    "hero_intro_heading",
                    models.CharField(
                        blank=True,
                        default="A healthy internet is one in which privacy, openness, and inclusion are the norms.",
                        max_length=100,
                    ),
                ),
                (
                    "hero_intro_body",
                    models.TextField(
                        blank=True,
                        default="Mozilla empowers consumers to demand better online privacy, trustworthy AI, and safe online experiences from Big Tech and governments. We work across borders, disciplines, and technologies to uphold principles like privacy, inclusion and decentralization online.",
                        max_length=300,
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_pages",
                        to="base.author",
                    ),
                ),
                (
                    "hero_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                        verbose_name="Search image",
                    ),
                ),
                (
                    "tags",
                    modelcluster.contrib.taggit.ClusterTaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="base.TaggedPage",
                        to="base.PageTag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "Home Page (new)",
            },
            bases=(
                wagtailmetadata.models.WagtailImageMetadataMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="GeneralPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("body", wagtail.fields.StreamField([], blank=True, block_lookup={})),
                ("hero_headline", models.CharField(blank=True, help_text="Hero story headline", max_length=120)),
                ("header", models.TextField(blank=True)),
                ("button_title", models.CharField(blank=True, max_length=250, verbose_name="Button Text")),
                ("button_url", models.TextField(blank=True, verbose_name="Button URL")),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_pages",
                        to="base.author",
                    ),
                ),
                (
                    "hero_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="wagtailimages.image",
                        verbose_name="Hero Image",
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                        verbose_name="Search image",
                    ),
                ),
                (
                    "tags",
                    modelcluster.contrib.taggit.ClusterTaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="base.TaggedPage",
                        to="base.PageTag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "General Page (new)",
            },
            bases=(
                wagtailmetadata.models.WagtailImageMetadataMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
    ]
