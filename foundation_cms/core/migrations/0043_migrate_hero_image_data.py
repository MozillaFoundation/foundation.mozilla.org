# Generated by Django 4.2.20 on 2025-08-10 17:51

from django.db import migrations


def migrate_hero_images_forward(apps, schema_editor):
    """Migrate data from hero_image_legacy to hero_image StreamField"""

    GeneralPage = apps.get_model("core", "GeneralPage")
    Image = apps.get_model("images", "FoundationCustomImage")

    migrated_count = 0
    error_count = 0

    print("Starting hero image migration...")

    pages_with_legacy = GeneralPage.objects.filter(hero_image_legacy__isnull=False)

    for page in pages_with_legacy:
        try:
            if page.hero_image:
                print(f"Page '{page.title}' already has StreamField data - skipping")
                continue

            if not Image.objects.filter(id=page.hero_image_legacy_id).exists():
                print(f"Image ID {page.hero_image_legacy_id} not found for '{page.title}' - skipping")
                error_count += 1
                continue

            page.hero_image = [
                {
                    "type": "image",
                    "value": {
                        "image": page.hero_image_legacy_id,
                        "alt_text": page.title,
                        "decorative": False,
                    },
                }
            ]
            page.save(update_fields=["hero_image"])
            migrated_count += 1
            print(f"Migrated '{page.title}' (image ID: {page.hero_image_legacy_id})")

        except Exception as e:
            error_count += 1
            print(f"Error migrating '{page.title}': {e}")

    print(f"Migration complete: {migrated_count} migrated, {error_count} errors")


def migrate_hero_images_reverse(apps, schema_editor):
    """Rollback: restore data from StreamField to hero_image_legacy"""

    GeneralPage = apps.get_model("core", "GeneralPage")

    rollback_count = 0
    error_count = 0

    print("Starting rollback...")

    for page in GeneralPage.objects.filter(hero_image__isnull=False):
        try:
            if page.hero_image and not page.hero_image_legacy_id:
                for block in page.hero_image:
                    if block.get("type") == "image":
                        value = block.get("value")
                        if isinstance(value, dict):
                            image_id = value.get("image")
                        elif hasattr(value, "id"):
                            image_id = value.id
                        elif isinstance(value, int):
                            image_id = value
                        else:
                            continue

                        if image_id:
                            page.hero_image_legacy_id = image_id
                            page.save(update_fields=["hero_image_legacy"])
                            rollback_count += 1
                            print(f"ðŸ”„ Rolled back '{page.title}' (image ID: {image_id})")
                            break

        except Exception as e:
            error_count += 1
            print(f"Rollback error for '{page.title}': {e}")

    print(f"ðŸ”„ Rollback complete: {rollback_count} restored, {error_count} errors")


class Migration(migrations.Migration):

    atomic = False

    dependencies = [
        ("core", "0042_hero_image_to_streamfield"),
    ]

    operations = [
        migrations.RunPython(migrate_hero_images_forward, migrate_hero_images_reverse),
    ]
