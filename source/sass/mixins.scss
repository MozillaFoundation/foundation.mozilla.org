// Break the constraints of parent container(s) to span the entire viewport width
@mixin full-bleed {
  width: 100vw;
  max-width: none;
  position: relative;
  left: 50%;
  right: 50%;
  margin-left: -50vw;
  margin-right: -50vw;
  padding-left: 0;
  padding-right: 0;
}

// Mixin to create ".full-bleed-breakpoint" utility classes
@mixin full-bleed-bp($breakpoint) {
  @include media-breakpoint-only($breakpoint) {
    .full-bleed-#{$breakpoint} {
      @include full-bleed;
    }
  }
}

@mixin heading(
  $font-family,
  $font-weight,
  $letter-spacing,
  $color,
  $dark-theme-color
) {
  font-family: $font-family;
  font-weight: $font-weight;
  letter-spacing: $letter-spacing;
  color: $color;
  margin-bottom: 1rem;

  @at-root .dark-theme & {
    color: $dark-theme-color;

    a {
      @include dark-theme-inline-anchor();
    }
  }

  a {
    color: inherit;
    font-weight: inherit;

    @include hover-focus-active {
      color: inherit;
      text-decoration: underline;
    }
  }
}

@mixin body-text($font-family, $font-weight, $color, $dark-theme-color) {
  font-family: $font-family;
  font-weight: $font-weight;
  color: $color;

  @at-root .dark-theme & {
    color: $dark-theme-color;

    a {
      @include dark-theme-inline-anchor($light-blue);
    }
  }
}

@mixin scaleText(
  $base-font-size,
  $base-line-height: null,
  $large-font-size: null,
  $large-line-height: null
) {
  font-size: $base-font-size;

  @if ($base-line-height) {
    line-height: $base-line-height/$base-font-size;
  }

  @if ($large-font-size) {
    @media screen and (min-width: $bp-md) {
      font-size: $large-font-size;

      @if ($large-line-height) {
        line-height: $large-line-height/$large-font-size;
      }
    }
  }
}

@mixin dark-theme-inline-anchor($color: inherit) {
  color: $color;
  font-weight: inherit;

  @include hover-focus-active {
    color: $light-blue;
    text-decoration: underline;
  }
}

@mixin intro-and-content-spacing($adjust-spacing-for-md: null) {
  margin-top: 24px;
  margin-bottom: 24px;

  @if ($adjust-spacing-for-md) {
    @media (min-width: $bp-md) {
      margin-top: 48px;
      margin-bottom: 48px;
    }
  }
}

@mixin cta-anchor-position($extra-vertical-spacing: 0px) {
  $offset: 80px;

  margin-top: -$offset;
  padding-top: calc(#{$offset} + #{$extra-vertical-spacing});
}

// TODO: override Bootstrap's "@mixin button-outline-variant" so we can reduce our overrides for buttons
@mixin button-basic-style(
  $default,
  $default-hover,
  $dark-theme-default,
  $dark-theme-hover
) {
  color: map-get($default, "color");
  background-color: map-get($default, "background-color");
  border-color: map-get($default, "border-color");

  &.active {
    color: map-get($default-hover, "color");
    background-color: map-get($default-hover, "background-color");
    border-color: map-get($default-hover, "border-color");
  }

  @include hover-focus-active {
    @extend .active;
  }

  &.disabled,
  &:disabled,
  &[disabled] {
    cursor: not-allowed;
    pointer-events: none;
    background-color: map-get($default, "background-color");
    border-color: map-get($default, "border-color");
    opacity: 0.3;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: map-get($default-hover, "color");
    background-color: map-get($default-hover, "background-color");
    border-color: map-get($default-hover, "border-color");
  }

  @at-root .dark-theme & {
    color: map-get($dark-theme-default, "color");
    background-color: map-get($dark-theme-default, "background-color");
    border-color: map-get($dark-theme-default, "border-color");

    @include hover-focus-active {
      color: map-get($dark-theme-hover, "color");
      background-color: map-get($dark-theme-hover, "background-color");
      border-color: map-get($dark-theme-hover, "border-color");
    }

    &.disabled,
    &:disabled,
    &[disabled] {
      opacity: 0.5;
      background-color: map-get($dark-theme-default, "background-color");
      border-color: map-get($dark-theme-default, "border-color");
    }

    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active,
    .show > &.dropdown-toggle {
      color: map-get($dark-theme-default, "color");
      background-color: map-get($dark-theme-default, "background-color");
      border-color: map-get($dark-theme-default, "border-color");

      @include hover-focus-active {
        color: map-get($dark-theme-hover, "color");
        background-color: map-get($dark-theme-hover, "background-color");
        border-color: map-get($dark-theme-hover, "border-color");
      }
    }
  }
}
